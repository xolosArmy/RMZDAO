import { PathLike } from 'fs';
export interface AbiInput {
    name: string;
    type: string;
}
export interface AbiFunction {
    name: string;
    covenant?: boolean;
    inputs: readonly AbiInput[];
}
export interface DebugInformation {
    bytecode: string;
    sourceMap: string;
    logs: readonly LogEntry[];
    requires: readonly RequireStatement[];
}
export interface LogEntry {
    ip: number;
    line: number;
    data: readonly LogData[];
}
export interface StackItem {
    type: string;
    stackIndex: number;
    ip: number;
}
export type LogData = StackItem | string;
export interface RequireStatement {
    ip: number;
    line: number;
    message?: string;
}
export interface Artifact {
    contractName: string;
    constructorInputs: readonly AbiInput[];
    abi: readonly AbiFunction[];
    bytecode: string;
    source: string;
    debug?: DebugInformation;
    compiler: {
        name: string;
        version: string;
    };
    updatedAt: string;
}
export declare function importArtifact(artifactFile: PathLike): Artifact;
export declare function exportArtifact(artifact: Artifact, targetFile: string, format: 'json' | 'ts'): void;
export declare function formatArtifact(artifact: Artifact, format: 'json' | 'ts'): string;
