import fs from 'fs';
export function importArtifact(artifactFile) {
    return JSON.parse(fs.readFileSync(artifactFile, { encoding: 'utf-8' }));
}
export function exportArtifact(artifact, targetFile, format) {
    const jsonString = formatArtifact(artifact, format);
    fs.writeFileSync(targetFile, jsonString);
}
export function formatArtifact(artifact, format) {
    if (format === 'ts') {
        // We remove any undefined values to make the artifact serializable using stringifyAsTs
        const normalisedArtifact = JSON.parse(JSON.stringify(artifact));
        return `export default ${stringifyAsTs(normalisedArtifact)} as const;\n`;
    }
    return JSON.stringify(artifact, null, 2);
}
const indent = (level) => '  '.repeat(level);
function stringifyAsTs(obj, indentationLevel = 1) {
    // For strings, we use JSON.stringify, but we convert double quotes to single quotes
    if (typeof obj === 'string') {
        return JSON.stringify(obj).replace(/'/g, "\\'").replace(/"/g, "'");
    }
    // Numbers and booleans are just converted to strings
    if (typeof obj === 'number' || typeof obj === 'boolean') {
        return JSON.stringify(obj);
    }
    // Arrays are recursively formatted with indentation
    if (Array.isArray(obj)) {
        if (obj.length === 0)
            return '[]';
        const formattedItems = obj.map((item) => `${indent(indentationLevel)}${stringifyAsTs(item, indentationLevel + 1)}`);
        return `[\n${formattedItems.join(',\n')},\n${indent(indentationLevel - 1)}]`;
    }
    // Objects are recursively formatted with indentation
    if (typeof obj === 'object') {
        const entries = Object.entries(obj);
        if (entries.length === 0)
            return '{}';
        const formattedEntries = entries.map(([key, value]) => (`${indent(indentationLevel)}${key}: ${stringifyAsTs(value, indentationLevel + 1)}`));
        return `{\n${formattedEntries.join(',\n')},\n${indent(indentationLevel - 1)}}`;
    }
    throw new Error(`Unsupported type: ${typeof obj}`);
}
//# sourceMappingURL=artifact.js.map