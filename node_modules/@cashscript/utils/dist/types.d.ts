export type Type = PrimitiveType | ArrayType | TupleType | BytesType;
export declare class ArrayType {
    elementType: Type;
    bound?: number | undefined;
    constructor(elementType: Type, bound?: number | undefined);
    toString(): string;
}
export declare class BytesType {
    bound?: number | undefined;
    constructor(bound?: number | undefined);
    static fromString(str: string): BytesType;
    toString(): string;
}
export declare class TupleType {
    elementType?: Type | undefined;
    constructor(elementType?: Type | undefined);
    toString(): string;
}
export declare enum PrimitiveType {
    INT = "int",
    BOOL = "bool",
    STRING = "string",
    PUBKEY = "pubkey",
    SIG = "sig",
    DATASIG = "datasig",
    ANY = "any"
}
export declare function explicitlyCastable(from?: Type, to?: Type): boolean;
export declare function implicitlyCastable(actual?: Type, expected?: Type): boolean;
export declare function resultingType(left?: Type, right?: Type): Type | undefined;
export declare function arrayType(types: Type[]): Type | undefined;
export declare function implicitlyCastableSignature(actual: Type[], expected: Type[]): boolean;
export declare function parseType(str: string): Type;
export declare function isPrimitive(type: Type): type is PrimitiveType;
export interface LocationI {
    start: {
        line: number;
        column: number;
    };
    end: {
        line: number;
        column: number;
    };
}
export type SingleLocationData = {
    location: LocationI;
    positionHint: PositionHint;
};
export type FullLocationData = Array<SingleLocationData>;
export declare enum PositionHint {
    START = 0,
    END = 1
}
