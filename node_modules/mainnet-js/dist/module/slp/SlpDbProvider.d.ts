import { Network } from "../interface.js";
import { SlpDbResponse, SlpTokenBalance, SlpTokenInfo, SlpTxI, SlpUtxoI } from "./interface.js";
import BigNumber from "bignumber.js";
import { SlpCancelWatchFn, SlpProvider, SlpWatchBalanceCallback, SlpWatchTransactionCallback } from "./SlpProvider.js";
export declare class SlpDbProvider implements SlpProvider {
    network: Network;
    static defaultServers: {
        mainnet: {
            dataSource: string;
            eventSource: string;
        };
        testnet: {
            dataSource: string;
            eventSource: string;
        };
        regtest: {
            dataSource: string;
            eventSource: string;
        };
    };
    servers: {
        mainnet: {
            dataSource: string;
            eventSource: string;
        };
        testnet: {
            dataSource: string;
            eventSource: string;
        };
        regtest: {
            dataSource: string;
            eventSource: string;
        };
    };
    caching: boolean;
    constructor(network?: Network);
    SlpOutpoints(slpaddr: string): Promise<String[]>;
    SlpUtxos(slpaddr: string): Promise<SlpUtxoI[]>;
    SlpTokenInfo(tokenId: string): Promise<SlpTokenInfo | undefined>;
    SlpSpendableUtxos(slpaddr: string, tokenId?: string): Promise<SlpUtxoI[]>;
    SlpBatonUtxos(slpaddr: string, tokenId?: string): Promise<SlpUtxoI[]>;
    SlpAllTokenBalances(slpaddr: string): Promise<SlpTokenBalance[]>;
    SlpTokenBalance(slpaddr: string, tokenId: string): Promise<SlpTokenBalance>;
    SlpAddressTransactionHistory(slpaddr: string, tokenId?: string, limit?: number, skip?: number): Promise<SlpTxI[]>;
    SlpWaitForTransaction(slpaddr: string, tokenId?: string): Promise<SlpTxI>;
    SlpWaitForBalance(value: BigNumber.Value, slpaddr: string, tokenId: string): Promise<SlpTokenBalance>;
    SlpWatchBalance(callback: SlpWatchBalanceCallback, slpaddr: string, tokenId: string): SlpCancelWatchFn;
    SlpWatchTransactions(callback: SlpWatchTransactionCallback, slpaddr: string, tokenId?: string): SlpCancelWatchFn;
    SlpDbQuery(queryObject: any): Promise<SlpDbResponse>;
    SlpSocketEventSource(queryObject: any): EventSource;
}
//# sourceMappingURL=SlpDbProvider.d.ts.map