import { Network } from "../interface.js";
import { SlpTokenBalance, SlpTokenInfo, SlpTxI, SlpUtxoI } from "./interface.js";
import BigNumber from "bignumber.js";
import { SlpCancelWatchFn, SlpProvider, SlpWatchBalanceCallback, SlpWatchTransactionCallback } from "./SlpProvider.js";
export declare class GsppProvider implements SlpProvider {
    network: Network;
    static defaultServers: {
        mainnet: {
            dataSource: string;
            eventSource: string;
        };
        testnet: {
            dataSource: string;
            eventSource: string;
        };
        regtest: {
            dataSource: string;
            eventSource: string;
        };
    };
    servers: {
        mainnet: {
            dataSource: string;
            eventSource: string;
        };
        testnet: {
            dataSource: string;
            eventSource: string;
        };
        regtest: {
            dataSource: string;
            eventSource: string;
        };
    };
    caching: boolean;
    constructor(network?: Network);
    SlpOutpoints(slpaddr: string): Promise<String[]>;
    SlpUtxos(slpaddr: string): Promise<SlpUtxoI[]>;
    SlpSpendableUtxos(slpaddr: string, tokenId?: string): Promise<SlpUtxoI[]>;
    SlpBatonUtxos(slpaddr: string, tokenId?: string): Promise<SlpUtxoI[]>;
    SlpTokenInfo(tokenId: string): Promise<SlpTokenInfo | undefined>;
    SlpAllTokenBalances(slpaddr: string): Promise<SlpTokenBalance[]>;
    SlpTokenBalance(slpaddr: string, tokenId: string): Promise<SlpTokenBalance>;
    SlpAddressTransactionHistory(_slpaddr: string, _tokenId?: string, _limit?: number, _skip?: number): Promise<SlpTxI[]>;
    SlpWaitForTransaction(slpaddr: string, tokenId?: string): Promise<SlpTxI>;
    SlpWaitForBalance(value: BigNumber.Value, slpaddr: string, tokenId: string): Promise<SlpTokenBalance>;
    SlpWatchBalance(callback: SlpWatchBalanceCallback, slpaddr: string, tokenId: string): SlpCancelWatchFn;
    SlpWatchTransactions(callback: SlpWatchTransactionCallback, slpaddr?: string, tokenId?: string): SlpCancelWatchFn;
    GsppQuery(queryObject: any, endpoint?: string): Promise<any>;
    SlpSocketEventSource(queryObject: any): EventSource;
}
export declare function _convertBalanceBigNumbers(balances: SlpTokenBalance[]): SlpTokenBalance[];
export declare function _convertUtxoBigNumbers(utxos: SlpUtxoI[]): SlpUtxoI[];
export declare function _convertSlpTokenInfo(tokenInfo: SlpTokenInfo | undefined): SlpTokenInfo | undefined;
//# sourceMappingURL=GsppProvider.d.ts.map