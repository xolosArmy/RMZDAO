import { SlpTokenBalance, SlpTokenInfo, SlpTxI, SlpUtxoI } from "./interface.js";
import BigNumber from "bignumber.js";
export declare type SlpWatchTransactionCallback = (tx: SlpTxI) => void;
export declare type SlpCancelWatchFn = () => Promise<void>;
export declare type SlpWatchBalanceCallback = (balance: SlpTokenBalance) => void;
export interface SlpProvider {
    SlpOutpoints(slpaddr: string): Promise<String[]>;
    SlpUtxos(slpaddr: string): Promise<SlpUtxoI[]>;
    SlpTokenInfo(tokenId: string): Promise<SlpTokenInfo | undefined>;
    SlpSpendableUtxos(slpaddr: string, tokenId?: string): Promise<SlpUtxoI[]>;
    SlpBatonUtxos(slpaddr: string, tokenId?: string): Promise<SlpUtxoI[]>;
    SlpAllTokenBalances(slpaddr: string): Promise<SlpTokenBalance[]>;
    SlpTokenBalance(slpaddr: string, tokenId: string): Promise<SlpTokenBalance>;
    SlpAddressTransactionHistory(slpaddr: string, tokenId?: string): Promise<SlpTxI[]>;
    SlpWaitForTransaction(slpaddr: string, tokenId?: string): Promise<SlpTxI>;
    SlpWaitForBalance(value: BigNumber.Value, slpaddr: string, tokenId: string): Promise<SlpTokenBalance>;
    SlpWatchBalance(callback: SlpWatchBalanceCallback, slpaddr: string, tokenId: string): SlpCancelWatchFn;
    SlpWatchTransactions(callback: SlpWatchTransactionCallback, slpaddr?: string, tokenId?: string): SlpCancelWatchFn;
}
export declare function _convertBalanceBigNumbers(balances: SlpTokenBalance[]): SlpTokenBalance[];
export declare function _convertUtxoBigNumbers(utxos: SlpUtxoI[]): SlpUtxoI[];
export declare function _convertSlpTokenInfo(tokenInfo: SlpTokenInfo | undefined): SlpTokenInfo | undefined;
export declare function _emptyTokenBalance(tokenId: string): SlpTokenBalance;
//# sourceMappingURL=SlpProvider.d.ts.map