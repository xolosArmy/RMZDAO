import Dexie from "dexie";
export default class IndexedDBProvider extends Dexie {
    constructor(dbName) {
        super(dbName);
        this.version(3).stores({
            wallet: "name",
        });
        this.db = this.table("wallet");
    }
    async init() {
        return this;
    }
    async close() {
        return this;
    }
    getInfo() {
        return "indexedDB";
    }
    async addWallet(name, walletId) {
        return this.transaction("rw", this.db, async () => {
            if ((await this.db.where({ name: name }).count()) === 0) {
                await this.db.add({ name: name, wallet: walletId }).catch((e) => {
                    throw Error(e);
                });
                return true;
            }
            else {
                return false;
            }
        }).catch((e) => {
            throw e.stack || e;
        });
    }
    async getWallet(name) {
        let obj = await this.db.get({ name: name });
        if (obj) {
            return obj;
        }
        else {
            return;
        }
    }
    async getWallets() {
        let walletObjects = await this.transaction("r", this.db, async () => {
            return await this.db.where("id").above(0).toArray();
        });
        if (walletObjects) {
            const WalletArray = await Promise.all(walletObjects.map(async (obj) => {
                return obj;
            }));
            return WalletArray;
        }
        else {
            return [];
        }
    }
    async updateWallet(name, walletId) {
        this.transaction("rw", this.db, async () => {
            const collection = this.db.where({ name: name });
            if ((await collection.count()) === 0) {
                return false;
            }
            else {
                const wallet = (await collection.first());
                await this.db
                    .put({ id: wallet.id, name: name, wallet: walletId }, wallet.id)
                    .catch((e) => {
                    throw Error(e);
                });
                return true;
            }
        }).catch((e) => {
            throw e.stack || e;
        });
    }
    async walletExists(name) {
        return (await this.getWallet(name)) !== undefined;
    }
}
//# sourceMappingURL=IndexedDBProvider.js.map