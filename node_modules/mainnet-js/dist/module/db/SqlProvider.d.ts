import StorageProvider from "./StorageProvider.js";
import { WalletI, FaucetQueueItemI } from "./interface.js";
import { TxI } from "../interface.js";
import { Webhook } from "../webhook/Webhook.js";
import { RegisterWebhookParams } from "../webhook/interface.js";
export default class SqlProvider implements StorageProvider {
    private db;
    private config;
    private info;
    private formatter;
    private walletTable;
    private webhookTable;
    private faucetQueueTable;
    private isInit;
    constructor(walletTable?: string);
    getConfig(): any;
    init(): Promise<StorageProvider>;
    close(): Promise<StorageProvider>;
    getInfo(): string;
    addWallet(name: string, walletId: string): Promise<boolean>;
    getWallets(): Promise<Array<WalletI>>;
    getWallet(name: string): Promise<WalletI | undefined>;
    updateWallet(name: string, walletId: string): Promise<void>;
    walletExists(name: string): Promise<boolean>;
    webhookFromDb(hook: Webhook): Promise<import("../webhook/WebhookSlp.js").WebhookSlp | import("../webhook/WebhookBch.js").WebhookBch>;
    addWebhook(params: RegisterWebhookParams): Promise<Webhook>;
    getWebhooks(): Promise<Array<Webhook>>;
    getWebhook(id: number): Promise<Webhook | undefined>;
    setWebhookStatus(id: number, status: string): Promise<void>;
    setWebhookSeenTxLastHeight(id: number, tx_seen: Array<TxI>, last_height: number): Promise<void>;
    deleteWebhook(id: number): Promise<void>;
    clearWebhooks(): Promise<void>;
    addFaucetQueueItem(address: string, tokenId: string, value: string): Promise<boolean>;
    getFaucetQueue(): Promise<Array<FaucetQueueItemI>>;
    deleteFaucetQueueItems(items: Array<FaucetQueueItemI>): Promise<boolean>;
    beginTransaction(): Promise<boolean>;
    commitTransaction(): Promise<boolean>;
    rollbackTransaction(): Promise<boolean>;
}
//# sourceMappingURL=SqlProvider.d.ts.map