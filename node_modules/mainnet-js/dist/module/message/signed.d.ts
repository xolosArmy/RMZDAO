import { SignedMessageI, SignedMessageResponseI, VerifyMessageResponseI } from "./interface.js";
/**
 * hash_magic - Return the hash of the string that has undergone standard formatting
 *
 * @param {str} string    The string to hash
 *
 * @returns a promise to the hash of the string.
 */
export declare function hash_message(str: string): Promise<Uint8Array>;
export declare class SignedMessage implements SignedMessageI {
    /**
     * sign - Calculate the recoverable signed checksum of a string message.
     *
     * @param {message} string          The
     * @param {privateKey} Uint8Array   The private key to sign the message with
     *
     * @returns a promise to signature as a string
     */
    sign(message: string, privateKey: Uint8Array): Promise<SignedMessageResponseI>;
    static sign(message: string, privateKey: Uint8Array): Promise<SignedMessageResponseI>;
    /**
     * verify - Validate that the message is valid against a given signature
     *
     * @param {message} string     The message to verify as a utf8 string
     * @param {signature} string   The signature as a base64 encoded string
     * @param {cashaddr} string    The cashaddr to validate the signature against a recoverable signature.
     * @param {publicKey} string    If publicKey is not recoverable from the signature type, the publicKey must be passed.
     *
     * @returns a promise to signature as a string
     */
    verify(message: string, signature: string, cashaddr?: string, publicKey?: Uint8Array): Promise<VerifyMessageResponseI>;
    static verify(message: string, signature: string, cashaddr?: string, publicKey?: Uint8Array): Promise<VerifyMessageResponseI>;
}
//# sourceMappingURL=signed.d.ts.map