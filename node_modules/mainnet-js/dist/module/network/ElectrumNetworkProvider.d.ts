import { ElectrumCluster, ElectrumClient } from "electrum-cash";
import { default as NetworkProvider } from "./NetworkProvider.js";
import { HeaderI, TxI, UtxoI } from "../interface.js";
import { Network } from "../interface.js";
import { ElectrumRawTransaction } from "./interface.js";
import { CancelWatchFn } from "../wallet/interface.js";
export default class ElectrumNetworkProvider implements NetworkProvider {
    network: Network;
    private manualConnectionManagement?;
    electrum: ElectrumCluster | ElectrumClient;
    subscriptions: number;
    version: any;
    private connectPromise;
    private blockHeight;
    constructor(electrum: ElectrumCluster | ElectrumClient, network?: Network, manualConnectionManagement?: boolean | undefined);
    private getConnectPromise;
    getUtxos(cashaddr: string): Promise<UtxoI[]>;
    getBalance(cashaddr: string): Promise<number>;
    getBlockHeight(): Promise<number>;
    static rawTransactionCache: {};
    getRawTransaction(txHash: string, verbose?: boolean, loadInputValues?: boolean): Promise<string>;
    getRawTransactionObject(txHash: string, loadInputValues?: boolean): Promise<ElectrumRawTransaction>;
    sendRawTransaction(txHex: string, awaitPropagation?: boolean): Promise<string>;
    getHistory(cashaddr: string): Promise<TxI[]>;
    getRelayFee(): Promise<number>;
    watchAddressStatus(cashaddr: string, callback: (status: string) => void): CancelWatchFn;
    watchAddress(cashaddr: string, callback: (txHash: string) => void): CancelWatchFn;
    watchAddressTransactions(cashaddr: string, callback: (tx: ElectrumRawTransaction) => void): CancelWatchFn;
    watchAddressTokenTransactions(cashaddr: string, callback: (tx: ElectrumRawTransaction) => void): CancelWatchFn;
    watchBlocks(callback: (header: HeaderI) => void): CancelWatchFn;
    waitForBlock(height?: number): Promise<HeaderI>;
    subscribeToHeaders(callback: (header: HeaderI) => void): Promise<void>;
    unsubscribeFromHeaders(callback: (header: HeaderI) => void): Promise<void>;
    subscribeToAddress(cashaddr: string, callback: (data: any) => void): Promise<void>;
    unsubscribeFromAddress(cashaddr: string, callback: (data: any) => void): Promise<void>;
    subscribeToAddressTransactions(cashaddr: string, callback: (data: any) => void): Promise<void>;
    unsubscribeFromAddressTransactions(cashaddr: string, callback: (data: any) => void): Promise<void>;
    subscribeToTransaction(txHash: string, callback: (data: any) => void): Promise<void>;
    unsubscribeFromTransaction(txHash: string, callback: (data: any) => void): Promise<void>;
    private performRequest;
    private subscribeRequest;
    private unsubscribeRequest;
    ready(): Promise<boolean | unknown>;
    connect(): Promise<void[]>;
    disconnect(): Promise<boolean[]>;
    isElectrumClient(): boolean;
    readyClient(timeout?: number): Promise<boolean | unknown>;
    readyCluster(timeout?: number): Promise<boolean>;
    connectCluster(): Promise<void[]>;
    connectClient(): Promise<void[]>;
    disconnectCluster(): Promise<boolean[]>;
    disconnectClient(): Promise<boolean[]>;
}
//# sourceMappingURL=ElectrumNetworkProvider.d.ts.map