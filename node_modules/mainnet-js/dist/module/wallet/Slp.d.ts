import { Wallet, RegTestWallet, TestNetWallet, WifWallet, TestNetWifWallet, RegTestWifWallet, WatchWallet, TestNetWatchWallet, RegTestWatchWallet } from "../wallet/Wif.js";
import { SlpFormattedUtxo, SlpGenesisOptions, SlpGenesisResult, SlpMintOptions, SlpMintResult, SlpSendRequest, SlpSendResponse, SlpTokenBalance, SlpTokenInfo, SlpTxI, SlpUtxoI } from "../slp/interface.js";
import { ImageI } from "../qr/interface.js";
import { ElectrumRawTransaction } from "../network/interface.js";
import BigNumber from "bignumber.js";
import { SlpCancelWatchFn, SlpProvider, SlpWatchBalanceCallback, SlpWatchTransactionCallback } from "../slp/SlpProvider.js";
/**
 * Class to manage an slp enabled wallet.
 */
export declare class Slp {
    slpaddr: string;
    readonly wallet: Wallet;
    provider: SlpProvider;
    private spentParentUtxos;
    static get walletType(): typeof Wallet;
    static defaultProvider: string;
    /**
     * Initializes an Slp Wallet.
     *
     * @param wallet     A non-slp wallet object
     */
    constructor(wallet: Wallet);
    /**
     * setProvider - sets the provider to fetch slp data from
     */
    setProvider(provider: SlpProvider): SlpProvider;
    /**
     * getDepositAddress - get the slp deposit address
     *
     * a high-level function,
     *
     * @see {@link https://rest-unstable.mainnet.cash/api-docs/#/wallet%2Fslp/slpDepositAddress|/wallet/slp/deposit_address} for REST endpoint
     *
     * @returns The the slp address as a string
     */
    getDepositAddress(): string;
    /**
     * getDepositQr - get an slp address qrcode, encoded for display on the web
     *
     * a high-level function
     *
     * @see {@link https://rest-unstable.mainnet.cash/api-docs/#/wallet%2Fslp/slpDepositQr|/wallet/slp/deposit_qr} for REST endpoint
     *
     * @returns The qrcode for the slp address
     */
    getDepositQr(): ImageI;
    /**
     * getTokenInfo - get data associated with a token
     *
     * a high-level function
     *
     * @see {@link https://rest-unstable.mainnet.cash/api-docs/#/wallet%2Fslp/slpTokenInfo|/wallet/slp/token_info} for REST endpoint
     *
     * @param tokenId  The tokenId to request information about
     *
     * @returns Promise to the slp token info or undefined.
     */
    getTokenInfo(tokenId: string): Promise<SlpTokenInfo | undefined>;
    /**
     * getSlpOutpoints - get a list of SLP unspent outpoints
     *
     * an intermediate function contributing to the output of wallet.getUtxos() and /wallet/utxos for slp enabled wallets
     *
     * @param slpaddr  The slpaddr to request slp unspent outpoints for
     *
     * @returns Promise to a list of slp unspent outpoints
     */
    getSlpOutpoints(): Promise<String[]>;
    /**
     * getSlpUtxos - get a list of SLP unspent outputs
     *
     * @returns Promise to a list of slp unspent outputs
     */
    getSlpUtxos(): Promise<SlpUtxoI[]>;
    /**
     * getFormattedSlpUtxos - get a list of unspent outputs
     *
     * an intermediate function
     *
     * @returns Promise to a list of slp formatted unspent outputs
     */
    getFormattedSlpUtxos(): Promise<SlpFormattedUtxo[]>;
    /**
     * getBatonUtxos - get a list of baton unspent outputs
     *
     * an intermediate function
     *
     * @param tokenId   The id of the slp token
     *
     * @returns Promise to a list of slp unspent outputs
     */
    getBatonUtxos(tokenId?: string): Promise<SlpUtxoI[]>;
    /**
     * getHistory - get a transaction history for a particular address
     *
     * an intermediate function
     *
     * @param tokenId   The id of the slp token
     *
     * @returns Promise to a list of transactions
     */
    getHistory(tokenId?: string): Promise<SlpTxI[]>;
    /**
     * getLastTransaction - get a last SLP token transaction of a particular address
     *
     * @param {boolean} [confirmedOnly=false]  When confirmedOnly is true, results will be limited to only transactions included in a block.
     *
     * @returns Promise to the transaction hex or error
     */
    getLastTransaction(confirmedOnly?: boolean): Promise<ElectrumRawTransaction>;
    /**
     * getBalance - get a token balance for a particular address
     *
     * a high-level function, see also /wallet/slp/balance REST endpoint
     *
     * @param tokenId   The id of the slp token
     *
     * @returns Promise to an SlpTokenBalance
     */
    getBalance(tokenId: string): Promise<SlpTokenBalance>;
    /**
     * getAllBalances - get all token balances for a particular address
     *
     * a high-level function, see also /wallet/slp/all_balances REST endpoint
     *
     * @returns Promise to an array of SlpTokenBalance
     */
    getAllBalances(): Promise<SlpTokenBalance[]>;
    /**
     * watchBalance - set up a callback to be called upon wallet's slp balance change
     *
     * can be cancelled by calling the function returned from this one
     *
     * @param callback   The callback function to be called each time the balance changes
     * @param tokenId    Specific token id to watch
     *
     * @returns A function to cancel the watching
     */
    watchBalance(callback: SlpWatchBalanceCallback, tokenId: string): SlpCancelWatchFn;
    /**
     * waitForBalance - wait for address balance to be greater than or equal to the target value
     *
     * This call halts the program execution
     *
     * @param value      Target balance value
     * @param tokenId    Specific token id to watch
     *
     * @returns Actual token balance after reaching or surpassing the target value
     */
    waitForBalance(value: BigNumber.Value, tokenId: string): Promise<SlpTokenBalance>;
    /**
     * watchBalance - set up a callback to be called upon wallet's slp transactions occurring
     *
     * can be cancelled by calling the function returned from this one
     *
     * @param callback   The callback function to be called each time the balance changes
     * @param tokenId    Specific token id to watch, optional
     *
     * @returns A function to cancel the watching
     */
    watchTransactions(callback: SlpWatchTransactionCallback, tokenId?: string): SlpCancelWatchFn;
    /**
     * waitForBalance - wait for the next SLP transaction to occur
     *
     * This call halts the program execution
     *
     * @param tokenId    Specific token id to watch, optional
     *
     * @returns Transaction object
     */
    waitForTransaction(tokenId?: string): Promise<SlpTxI>;
    /**
     * genesis - create a new Type1 SLP token
     *
     * @param options    Token creation options @see SlpGenesisOptions
     *
     * @returns Token Id and new token balance
     */
    genesis(options: SlpGenesisOptions): Promise<SlpGenesisResult>;
    /**
     * nftParentGenesis - create a new NFT Parent token
     *
     * @param options    Token creation options @see SlpGenesisOptions
     *
     * @returns Token Id and new token balance
     */
    nftParentGenesis(options: SlpGenesisOptions): Promise<SlpGenesisResult>;
    /**
     * nftParentGenesis - create a new NFT Child token
     *
     * @param parentTokenId    Parent token id, at least one is required and will be spent in the child genesis process
     * @param options    Token creation options @see SlpGenesisOptions
     *
     * @returns Token Id and new token balance
     */
    nftChildGenesis(options: SlpGenesisOptions): Promise<SlpGenesisResult>;
    /**
     * _processGenesis - prepare the genesis transaction with given parameters
     *
     * a private utility wrapper to pre-process transactions
     *
     * @param options   genesis options to controll the process
     *
     * @returns the created tokenId (which is genesis transaction id) and token balance
     */
    private _processGenesis;
    /**
     * sendMax - send the maximum spendable amount for a token to an slpaddr.
     *
     * a high-level function, see also /wallet/slp/send_max REST endpoint
     *
     * @param slpaddr   destination SLP address
     * @param tokenId   the id of the token to be spent
     *
     * @returns transaction id and token balance
     */
    sendMax(slpaddr: string, tokenId: string): Promise<SlpSendResponse>;
    /**
     *  explorerUrl   Web url to a transaction on a block explorer
     *
     * @param txId   transaction Id
     * @returns   Url string
     */
    explorerUrl(txId: string): string;
    /**
     * send - attempt to process a list of slp send requests.
     *
     * a high-level function, see also /wallet/slp/send REST endpoint
     *
     * @param [requests]   list of send requests
     *
     * @returns transaction id and token balance
     */
    send(requests: SlpSendRequest[]): Promise<SlpSendResponse>;
    /**
     * _processSendRequests - given a list of sendRequests, estimate fees, build the transaction and submit it.
     *
     * A private utility wrapper to pre-process transactions
     *
     * Unstable - behavior may change without notice.
     *
     * @param  {SlpSendRequest[]} sendRequests
     */
    private _processSendRequests;
    /**
     * mint - create new tokens to increase the circulation supply.
     *
     * a high-level function, see also /wallet/slp/mint endpoint
     *
     * @param value   amount to mint
     * @param tokenId   the tokenId of the slp being minted
     * @param endBaton   boolean indicating whether the token should continue to be "mintable"
     *
     * @returns transaction id and token balance
     */
    mint(options: SlpMintOptions): Promise<SlpMintResult>;
    /**
     * _processMint - given mint parameters, prepare the transaction
     *
     * a private utility wrapper to pre-process transactions
     *
     * @param value   amount to mint
     * @param tokenId   the tokenId of the slp being minted
     * @param endBaton   boolean indicating whether the token should continue to be "mintable"
     *
     * @returns the tokenId and minting transaction id
     */
    private _processMint;
    /**
     * processSlpTransaction - process the prepared SLP transaction and submit it to the network
     *
     * @param fundingBchUtxos   ensure these BCH utxos to be spent in the process
     * @param slpOutputsResult  prepared SLP outputs to be added to transaction
     *
     * @returns the tokenId and minting transaction id
     */
    private processSlpTransaction;
    /**
     * _submitTransaction - transform binary transaction to hex and submit it to the network provider
     *
     * a private utility wrapper submit raw transactions
     *
     * @param transaction   raw transaction
     *
     * @returns the transaction id of the broadcasted transaction
     */
    private _submitTransaction;
    /**
     * substituteOptionals - substitute optional fields with default values
     *
     * will ensure that baton and token receiver are intialized as SLP address of this wallet if absent
     * will ensure that baton will not be ended if endBaton is undefined
     * a private utility wrapper substitute optionals
     *
     * @param options   genesis or mint options to substitute values int
     *
     * @returns options with relevant values substituted/initialized
     */
    private substituteOptionals;
    /**
     * fromId - create an SLP aware wallet from encoded walletId string
     *
     * @param walletId   walletId options to steer the creation process
     *
     * @returns wallet instantiated accordingly to the walletId rules
     */
    static fromId(walletId: string): Promise<Wallet>;
    /**
     * named - create an SLP aware named wallet
     *
     * @param name   user friendly wallet alias
     * @param dbName name under which the wallet will be stored in the database
     * @param force  force recreate wallet in the database if a record already exist
     *
     * @returns instantiated wallet
     */
    static named(name: string, dbName?: string, force?: boolean): Promise<Wallet>;
    /**
     * fromSeed - create an SLP aware wallet using the seed phrase and derivation path
     *
     * unless specified the derivation path m/44'/245'/0'/0/0 will be userd
     * this derivation path is standard for Electron Cash SLP and other SLP enabled wallets
     *
     * @param seed   BIP39 12 word seed phrase
     * @param derivationPath BIP44 HD wallet derivation path to get a single the private key from hierarchy
     *
     * @returns instantiated wallet
     */
    static fromSeed(seed: string, derivationPath?: string): Promise<Wallet>;
    /**
     * newRandom - create an SLP aware random wallet
     *
     * if `name` parameter is specified, the wallet will also be persisted to DB
     *
     * @param name   user friendly wallet alias
     * @param dbName name under which the wallet will be stored in the database
     *
     * @returns instantiated wallet
     */
    static newRandom(name?: string, dbName?: string): Promise<Wallet>;
    /**
     * fromWIF - create an SLP aware wallet using the private key supplied in `Wallet Import Format`
     *
     * @param wif   WIF encoded private key string
     *
     * @returns instantiated wallet
     */
    static fromWIF(wif: string): Promise<Wallet>;
    /**
     * watchOnly - create an SLP aware watch-only wallet
     *
     * such kind of wallet does not have a private key and is unable to spend any funds
     * however it still allows to use many utility functions such as getting and watching balance, etc.
     *
     * @param address   cashaddress or slpaddress of a wallet
     *
     * @returns instantiated wallet
     */
    static watchOnly(address: string): Promise<Wallet>;
    /**
     * fromCashaddr - create an SLP aware watch-only wallet in the network derived from the address
     *
     * such kind of wallet does not have a private key and is unable to spend any funds
     * however it still allows to use many utility functions such as getting and watching balance, etc.
     *
     * @param address   cashaddress of a wallet
     *
     * @returns instantiated wallet
     */
    static fromCashaddr(address: string): Promise<Wallet>;
    /**
     * fromSlpaddr - create an SLP aware watch-only wallet in the network derived from the address
     *
     * such kind of wallet does not have a private key and is unable to spend any funds
     * however it still allows to use many utility functions such as getting and watching balance, etc.
     *
     * @param address   slpaddress of a wallet
     *
     * @returns instantiated wallet
     */
    static fromSlpaddr(address: string): Promise<Wallet>;
}
/**
 * Class to manage an slp enabled testnet wallet.
 */
export declare class TestNetSlp extends Slp {
    static get walletType(): typeof TestNetWallet;
}
/**
 * Class to manage an slp enabled regtest wallet.
 */
export declare class RegTestSlp extends Slp {
    static get walletType(): typeof RegTestWallet;
}
/**
 * Class to manage a bitcoin cash wif wallet.
 */
export declare class WifSlp extends Slp {
    static get walletType(): typeof WifWallet;
}
/**
 * Class to manage a testnet wif wallet.
 */
export declare class TestNetWifSlp extends Slp {
    static get walletType(): typeof TestNetWifWallet;
}
/**
 * Class to manage a regtest wif wallet.
 */
export declare class RegTestWifSlp extends Slp {
    static get walletType(): typeof RegTestWifWallet;
}
/**
 * Class to manage a bitcoin cash watch wallet.
 */
export declare class WatchSlp extends Slp {
    static get walletType(): typeof WatchWallet;
}
/**
 * Class to manage a testnet watch wallet.
 */
export declare class TestNetWatchSlp extends Slp {
    static get walletType(): typeof TestNetWatchWallet;
}
/**
 * Class to manage a regtest watch wallet.
 */
export declare class RegTestWatchSlp extends Slp {
    static get walletType(): typeof RegTestWatchWallet;
}
//# sourceMappingURL=Slp.d.ts.map