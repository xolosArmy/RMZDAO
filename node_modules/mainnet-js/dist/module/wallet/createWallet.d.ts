import { Wallet, TestNetWallet, RegTestWallet, WifWallet, TestNetWifWallet, RegTestWifWallet, WatchWallet, TestNetWatchWallet, RegTestWatchWallet } from "./Wif.js";
import { WalletRequestI, WalletResponseI } from "./interface.js";
export declare const walletClassMap: {
    wif: {
        mainnet: () => typeof WifWallet;
        testnet: () => typeof TestNetWifWallet;
        regtest: () => typeof RegTestWifWallet;
    };
    seed: {
        mainnet: () => typeof Wallet;
        testnet: () => typeof TestNetWallet;
        regtest: () => typeof RegTestWallet;
    };
    watch: {
        mainnet: () => typeof WatchWallet;
        testnet: () => typeof TestNetWatchWallet;
        regtest: () => typeof RegTestWatchWallet;
    };
};
/**
 * Check if wallet exists
 * @param body A wallet request object
 * @returns A promise to the check result
 */
export declare function namedWalletExists(body: any): Promise<boolean>;
/**
 * Get or create a named wallet
 * @param name user friendly wallet alias
 * @param walletType wallet type
 * @param networkType wallet network type
 * @returns A promise to a new wallet object
 */
export declare function namedWallet(name: any, walletType: any, networkType: any): Promise<Wallet>;
/**
 * Replace or create a named wallet with a walletId
 * @param body A wallet request object
 * @returns A promise to a new wallet object
 */
export declare function replaceNamedWallet(body: any): Promise<Wallet>;
/**
 * Create a new wallet
 * @param body A wallet request object
 * @returns A promise to a new wallet object
 */
export declare function createWallet(body: WalletRequestI): Promise<Wallet>;
/**
 * Create a new SLP aware wallet
 * @param body A wallet request object
 * @returns A promise to a new wallet object
 */
export declare function createSlpWallet(body: WalletRequestI): Promise<Wallet>;
/**
 * Create a new wallet
 * @param walletRequest A wallet request object
 * @returns A new wallet object
 */
export declare function createWalletResponse(walletRequest: WalletRequestI): Promise<WalletResponseI>;
/**
 * Create a new SLP aware wallet
 * @param walletRequest A wallet request object
 * @returns A new wallet object
 */
export declare function createSlpWalletResponse(walletRequest: WalletRequestI): Promise<WalletResponseI>;
/**
 * walletFromId - get a wallet from a serialized wallet
 * @param {string} walletId A serialized wallet object
 * @returns A wallet
 */
export declare function walletFromId(walletId: string): Promise<any>;
//# sourceMappingURL=createWallet.d.ts.map