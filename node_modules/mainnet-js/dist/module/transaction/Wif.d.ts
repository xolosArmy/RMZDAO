import { Compiler, AnyCompilerConfiguration, AuthenticationProgramStateCommon, CompilationContextBCH, Output } from "@bitauth/libauth";
import { UtxoI } from "../interface.js";
import { OpReturnData, SendRequest, SendRequestType, SourceOutput, TokenSendRequest } from "../wallet/model.js";
import { FeePaidByEnum } from "../wallet/enum.js";
export declare function buildP2pkhNonHdTransaction({ inputs, outputs, signingKey, sourceAddress, fee, discardChange, slpOutputs, feePaidBy, changeAddress, }: {
    inputs: UtxoI[];
    outputs: Array<SendRequest | TokenSendRequest | OpReturnData>;
    signingKey: Uint8Array;
    sourceAddress: string;
    fee?: number;
    discardChange?: boolean;
    slpOutputs?: Output[];
    feePaidBy?: FeePaidByEnum;
    changeAddress?: string;
}): Promise<{
    transaction: import("@bitauth/libauth").TransactionCommon<import("@bitauth/libauth").Input<Uint8Array, Uint8Array>, Output<Uint8Array, Uint8Array>>;
    sourceOutputs: any[];
}>;
export declare function prepareInputs({ inputs, compiler, signingKey, sourceAddress, }: {
    inputs: UtxoI[];
    compiler: Compiler<CompilationContextBCH, AnyCompilerConfiguration<CompilationContextBCH>, AuthenticationProgramStateCommon>;
    signingKey: Uint8Array;
    sourceAddress: string;
}): {
    preparedInputs: any[];
    sourceOutputs: any[];
};
/**
 * prepareOutputs - create outputs for a transaction from a list of send requests
 *
 * a wrapper function
 *
 * @returns A promise to a list of unspent outputs
 */
export declare function prepareOutputs(outputs: Array<SendRequest | TokenSendRequest | OpReturnData>): Promise<Output<Uint8Array, Uint8Array>[]>;
/**
 * prepareOpReturnOutput - create an output for OP_RETURN data
 *
 * @returns A promise to a list of unspent outputs
 */
export declare function prepareOpReturnOutput(request: OpReturnData): Output;
/**
 * prepareOpReturnOutput - create an output for token data
 *
 * @returns A libauth Output
 */
export declare function prepareTokenOutputs(request: TokenSendRequest): Output;
/**
 * getSuitableUtxos - Filter a list of unspent transaction outputs to the minimum needed to complete a transaction
 *
 * a intermediate function
 *
 * @param unspentOutputs  An unfiltered list of available unspent transaction outputs
 *
 * @returns A promise to a list of unspent outputs
 */
export declare function getSuitableUtxos(inputs: UtxoI[], amountRequired: BigInt | undefined, bestHeight: number, feePaidBy: FeePaidByEnum, requests: SendRequestType[], ensureUtxos?: UtxoI[], tokenOperation?: "send" | "genesis" | "mint" | "burn"): Promise<UtxoI[]>;
export declare function getFeeAmountSimple({ utxos, sendRequests, relayFeePerByteInSatoshi, slpOutputs, discardChange, }: {
    utxos: UtxoI[];
    sendRequests: Array<SendRequest | TokenSendRequest | OpReturnData>;
    privateKey: Uint8Array;
    sourceAddress: string;
    relayFeePerByteInSatoshi: number;
    slpOutputs: Output[];
    feePaidBy: FeePaidByEnum;
    discardChange?: boolean;
}): Promise<number>;
export declare function getFeeAmount({ utxos, sendRequests, privateKey, sourceAddress, relayFeePerByteInSatoshi, slpOutputs, feePaidBy, discardChange, }: {
    utxos: UtxoI[];
    sendRequests: Array<SendRequest | TokenSendRequest | OpReturnData>;
    privateKey: Uint8Array;
    sourceAddress: string;
    relayFeePerByteInSatoshi: number;
    slpOutputs: Output[];
    feePaidBy: FeePaidByEnum;
    discardChange?: boolean;
}): Promise<number>;
export declare function buildEncodedTransaction({ inputs, outputs, signingKey, sourceAddress, fee, discardChange, slpOutputs, feePaidBy, changeAddress, buildUnsigned, }: {
    inputs: UtxoI[];
    outputs: Array<SendRequest | TokenSendRequest | OpReturnData>;
    signingKey: Uint8Array;
    sourceAddress: string;
    fee?: number;
    discardChange?: boolean;
    slpOutputs?: Output[];
    feePaidBy?: FeePaidByEnum;
    changeAddress?: string;
    buildUnsigned?: boolean;
}): Promise<{
    encodedTransaction: Uint8Array;
    sourceOutputs: any[];
}>;
export declare function signUnsignedTransaction(transaction: Uint8Array | string, sourceOutputs: SourceOutput[], signingKey: Uint8Array): Promise<Uint8Array>;
//# sourceMappingURL=Wif.d.ts.map