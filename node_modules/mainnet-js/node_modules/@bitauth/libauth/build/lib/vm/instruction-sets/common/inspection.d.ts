import type { AuthenticationProgramStateError, AuthenticationProgramStateMinimum, AuthenticationProgramStateStack, AuthenticationProgramStateTransactionContext, Input, Output } from '../../../lib.js';
import type { AuthenticationProgramStateCodeSeparator } from '../../vm-types.js';
export declare const opInputIndex: <State extends AuthenticationProgramStateError & AuthenticationProgramStateStack & AuthenticationProgramStateTransactionContext>(state: State) => State;
export declare const opActiveBytecode: <State extends AuthenticationProgramStateCodeSeparator & AuthenticationProgramStateError & AuthenticationProgramStateMinimum & AuthenticationProgramStateStack & AuthenticationProgramStateTransactionContext>(state: State) => State;
export declare const opTxVersion: <State extends AuthenticationProgramStateError & AuthenticationProgramStateStack & AuthenticationProgramStateTransactionContext>(state: State) => State;
export declare const opTxInputCount: <State extends AuthenticationProgramStateError & AuthenticationProgramStateStack & AuthenticationProgramStateTransactionContext>(state: State) => State;
export declare const opTxOutputCount: <State extends AuthenticationProgramStateError & AuthenticationProgramStateStack & AuthenticationProgramStateTransactionContext>(state: State) => State;
export declare const opTxLocktime: <State extends AuthenticationProgramStateError & AuthenticationProgramStateStack & AuthenticationProgramStateTransactionContext>(state: State) => State;
export declare const useTransactionUtxo: <State extends AuthenticationProgramStateError & AuthenticationProgramStateStack & AuthenticationProgramStateTransactionContext>(state: State, operation: (nextState: State, [utxo]: [Output]) => State) => State;
export declare const opUtxoValue: <State extends AuthenticationProgramStateError & AuthenticationProgramStateStack & AuthenticationProgramStateTransactionContext>(state: State) => State;
export declare const opUtxoBytecode: <State extends AuthenticationProgramStateError & AuthenticationProgramStateStack & AuthenticationProgramStateTransactionContext>(state: State) => State;
export declare const useTransactionInput: <State extends AuthenticationProgramStateError & AuthenticationProgramStateStack & AuthenticationProgramStateTransactionContext>(state: State, operation: (nextState: State, [input]: [Input]) => State) => State;
export declare const opOutpointTxHash: <State extends AuthenticationProgramStateError & AuthenticationProgramStateStack & AuthenticationProgramStateTransactionContext>(state: State) => State;
export declare const opOutpointIndex: <State extends AuthenticationProgramStateError & AuthenticationProgramStateStack & AuthenticationProgramStateTransactionContext>(state: State) => State;
export declare const opInputBytecode: <State extends AuthenticationProgramStateError & AuthenticationProgramStateStack & AuthenticationProgramStateTransactionContext>(state: State) => State;
export declare const opInputSequenceNumber: <State extends AuthenticationProgramStateError & AuthenticationProgramStateStack & AuthenticationProgramStateTransactionContext>(state: State) => State;
export declare const useTransactionOutput: <State extends AuthenticationProgramStateError & AuthenticationProgramStateStack & AuthenticationProgramStateTransactionContext>(state: State, operation: (nextState: State, [output]: [Output]) => State) => State;
export declare const opOutputValue: <State extends AuthenticationProgramStateError & AuthenticationProgramStateStack & AuthenticationProgramStateTransactionContext>(state: State) => State;
export declare const opOutputBytecode: <State extends AuthenticationProgramStateError & AuthenticationProgramStateStack & AuthenticationProgramStateTransactionContext>(state: State) => State;
//# sourceMappingURL=inspection.d.ts.map