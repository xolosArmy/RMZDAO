import { Artifact, Script } from '@cashscript/utils';
import { Transaction } from './Transaction.js';
import { ConstructorArgument, FunctionArgument } from './Argument.js';
import { Unlocker, ContractOptions, Utxo, AddressType } from './interfaces.js';
import NetworkProvider from './network/NetworkProvider.js';
import { ParamsToTuple, AbiToFunctionMap } from './types/type-inference.js';
export declare class Contract<TArtifact extends Artifact = Artifact, TResolved extends {
    constructorInputs: ConstructorArgument[];
    functions: Record<string, any>;
    unlock: Record<string, any>;
} = {
    constructorInputs: ParamsToTuple<TArtifact['constructorInputs']>;
    functions: AbiToFunctionMap<TArtifact['abi'], Transaction>;
    unlock: AbiToFunctionMap<TArtifact['abi'], Unlocker>;
}> {
    artifact: TArtifact;
    private options?;
    name: string;
    address: string;
    tokenAddress: string;
    bytecode: string;
    bytesize: number;
    opcount: number;
    functions: TResolved['functions'];
    unlock: TResolved['unlock'];
    redeemScript: Script;
    provider: NetworkProvider;
    addressType: AddressType;
    encodedConstructorArgs: Uint8Array[];
    constructor(artifact: TArtifact, constructorArgs: TResolved['constructorInputs'], options?: ContractOptions | undefined);
    getBalance(): Promise<bigint>;
    getUtxos(): Promise<Utxo[]>;
    private createFunction;
    private createUnlocker;
}
export type ContractFunction = (...args: FunctionArgument[]) => Transaction;
export type ContractUnlocker = (...args: FunctionArgument[]) => Unlocker;
