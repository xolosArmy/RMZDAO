import { BchnRpcClient, } from '@mr-zwets/bchn-api-wrapper';
export default class BitcoinRpcNetworkProvider {
    constructor(network, url, opts) {
        this.network = network;
        this.rpcClient = new BchnRpcClient({ url, ...opts });
    }
    async getUtxos(address) {
        const result = await this.rpcClient.request('listunspent', 0, 9999999, [address]);
        const utxos = result.map((utxo) => ({
            txid: utxo.txid,
            vout: utxo.vout,
            satoshis: BigInt(utxo.amount * 1e8),
        }));
        return utxos;
    }
    async getBlockHeight() {
        return this.rpcClient.request('getblockcount');
    }
    async getRawTransaction(txid) {
        return this.rpcClient.request('getrawtransaction', txid, 0);
    }
    async sendRawTransaction(txHex) {
        return this.rpcClient.request('sendrawtransaction', txHex);
    }
    getClient() {
        return this.rpcClient;
    }
}
//# sourceMappingURL=BitcoinRpcNetworkProvider.js.map