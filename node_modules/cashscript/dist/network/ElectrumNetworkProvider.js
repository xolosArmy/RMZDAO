import { binToHex } from '@bitauth/libauth';
import { sha256 } from '@cashscript/utils';
import { ElectrumCluster, ElectrumTransport, ClusterOrder, } from 'electrum-cash';
import { Network } from '../interfaces.js';
import { addressToLockScript } from '../utils.js';
export default class ElectrumNetworkProvider {
    constructor(network = Network.MAINNET, electrum, manualConnectionManagement) {
        this.network = network;
        this.manualConnectionManagement = manualConnectionManagement;
        this.concurrentRequests = 0;
        // If a custom Electrum Cluster is passed, we use it instead of the default.
        if (electrum) {
            this.electrum = electrum;
            return;
        }
        if (network === Network.MAINNET) {
            // Initialise a 2-of-3 Electrum Cluster with 6 reliable hardcoded servers
            // using the first three servers as "priority" servers
            this.electrum = new ElectrumCluster('CashScript Application', '1.4.1', 2, 3, ClusterOrder.PRIORITY);
            this.electrum.addServer('bch.imaginary.cash', 50004, ElectrumTransport.WSS.Scheme, false);
            this.electrum.addServer('blackie.c3-soft.com', 50004, ElectrumTransport.WSS.Scheme, false);
            this.electrum.addServer('electroncash.de', 60002, ElectrumTransport.WSS.Scheme, false);
            this.electrum.addServer('electroncash.dk', 50004, ElectrumTransport.WSS.Scheme, false);
            this.electrum.addServer('bch.loping.net', 50004, ElectrumTransport.WSS.Scheme, false);
            this.electrum.addServer('electrum.imaginary.cash', 50004, ElectrumTransport.WSS.Scheme, false);
        }
        else if (network === Network.TESTNET3) {
            // Initialise a 1-of-2 Electrum Cluster with 2 hardcoded servers
            this.electrum = new ElectrumCluster('CashScript Application', '1.4.1', 1, 2, ClusterOrder.PRIORITY);
            this.electrum.addServer('blackie.c3-soft.com', 60004, ElectrumTransport.WSS.Scheme, false);
            this.electrum.addServer('electroncash.de', 60004, ElectrumTransport.WSS.Scheme, false);
            // this.electrum.addServer('bch.loping.net', 60004, ElectrumTransport.WSS.Scheme, false);
            // this.electrum.addServer('testnet.imaginary.cash', 50004, ElectrumTransport.WSS.Scheme);
        }
        else if (network === Network.TESTNET4) {
            this.electrum = new ElectrumCluster('CashScript Application', '1.4.1', 1, 1, ClusterOrder.PRIORITY);
            this.electrum.addServer('testnet4.imaginary.cash', 50004, ElectrumTransport.WSS.Scheme, false);
        }
        else if (network === Network.CHIPNET) {
            this.electrum = new ElectrumCluster('CashScript Application', '1.4.1', 1, 1, ClusterOrder.PRIORITY);
            this.electrum.addServer('chipnet.imaginary.cash', 50004, ElectrumTransport.WSS.Scheme, false);
        }
        else {
            throw new Error(`Tried to instantiate an ElectrumNetworkProvider for unsupported network ${network}`);
        }
    }
    async getUtxos(address) {
        const scripthash = addressToElectrumScriptHash(address);
        const filteringOption = 'include_tokens';
        const result = await this.performRequest('blockchain.scripthash.listunspent', scripthash, filteringOption);
        const utxos = result.map((utxo) => ({
            txid: utxo.tx_hash,
            vout: utxo.tx_pos,
            satoshis: BigInt(utxo.value),
            token: utxo.token_data ? {
                ...utxo.token_data,
                amount: BigInt(utxo.token_data.amount),
            } : undefined,
        }));
        return utxos;
    }
    async getBlockHeight() {
        const { height } = await this.performRequest('blockchain.headers.subscribe');
        return height;
    }
    async getRawTransaction(txid) {
        return await this.performRequest('blockchain.transaction.get', txid);
    }
    async sendRawTransaction(txHex) {
        return await this.performRequest('blockchain.transaction.broadcast', txHex);
    }
    async connectCluster() {
        try {
            return await this.electrum.startup();
        }
        catch (e) {
            return [];
        }
    }
    async disconnectCluster() {
        return this.electrum.shutdown();
    }
    async performRequest(name, ...parameters) {
        // Only connect the cluster when no concurrent requests are running
        if (this.shouldConnect()) {
            this.connectCluster();
        }
        this.concurrentRequests += 1;
        await this.electrum.ready();
        let result;
        try {
            result = await this.electrum.request(name, ...parameters);
        }
        finally {
            // Always disconnect the cluster, also if the request fails
            // as long as no other concurrent requests are running
            if (this.shouldDisconnect()) {
                await this.disconnectCluster();
            }
        }
        this.concurrentRequests -= 1;
        if (result instanceof Error)
            throw result;
        return result;
    }
    shouldConnect() {
        if (this.manualConnectionManagement)
            return false;
        if (this.concurrentRequests !== 0)
            return false;
        return true;
    }
    shouldDisconnect() {
        if (this.manualConnectionManagement)
            return false;
        if (this.concurrentRequests !== 1)
            return false;
        return true;
    }
}
/**
 * Helper function to convert an address to an electrum-cash compatible scripthash.
 * This is necessary to support electrum versions lower than 1.4.3, which do not
 * support addresses, only script hashes.
 *
 * @param address Address to convert to an electrum scripthash
 *
 * @returns The corresponding script hash in an electrum-cash compatible format
 */
function addressToElectrumScriptHash(address) {
    // Retrieve locking script
    const lockScript = addressToLockScript(address);
    // Hash locking script
    const scriptHash = sha256(lockScript);
    // Reverse scripthash
    scriptHash.reverse();
    // Return scripthash as a hex string
    return binToHex(scriptHash);
}
//# sourceMappingURL=ElectrumNetworkProvider.js.map