import { Transaction } from '@bitauth/libauth';
import { Script } from '@cashscript/utils';
import { Utxo, Output, LibauthOutput, TokenDetails, AddressType } from './interfaces.js';
export declare function validateOutput(output: Output): void;
export declare function calculateDust(output: Output): number;
export declare function getOutputSize(output: Output): number;
export declare function encodeOutput(output: Output): Uint8Array;
export declare function cashScriptOutputToLibauthOutput(output: Output): LibauthOutput;
export declare function libauthOutputToCashScriptOutput(output: LibauthOutput): Output;
export declare function getInputSize(inputScript: Uint8Array): number;
export declare function getPreimageSize(script: Uint8Array): number;
export declare function getTxSizeWithoutInputs(outputs: Output[]): number;
export declare function createInputScript(redeemScript: Script, encodedArgs: Uint8Array[], selector?: number, preimage?: Uint8Array): Uint8Array;
export declare function createOpReturnOutput(opReturnData: string[]): Output;
export declare function createSighashPreimage(transaction: Transaction, sourceOutputs: LibauthOutput[], inputIndex: number, coveredBytecode: Uint8Array, hashtype: number): Uint8Array;
export declare function toRegExp(reasons: string[]): RegExp;
export declare function scriptToAddress(script: Script, network: string, addressType: AddressType, tokenSupport: boolean): string;
export declare function scriptToLockingBytecode(script: Script, addressType: AddressType): Uint8Array;
export declare function publicKeyToP2PKHLockingBytecode(publicKey: Uint8Array): Uint8Array;
export declare function utxoComparator(a: Utxo, b: Utxo): number;
export declare function utxoTokenComparator(a: Utxo, b: Utxo): number;
/**
* Helper function to convert an address to a locking script
*
* @param address   Address to convert to locking script
*
* @returns a locking script corresponding to the passed address
*/
export declare function addressToLockScript(address: string): Uint8Array;
export declare function getNetworkPrefix(network: string): 'bitcoincash' | 'bchtest' | 'bchreg';
export declare const randomUtxo: (defaults?: Partial<Utxo>) => Utxo;
export declare const randomToken: (defaults?: Partial<TokenDetails>) => TokenDetails;
export declare const randomNFT: (defaults?: Partial<TokenDetails>) => TokenDetails;
export declare function findLastIndex<T>(array: Array<T>, predicate: (value: T, index: number, obj: T[]) => boolean): number;
export declare const snakeCase: (str: string) => string;
export declare const extendedStringify: (obj: any, spaces?: number) => string;
export declare const zip: <T, U>(a: readonly T[], b: readonly U[]) => [T, U][];
