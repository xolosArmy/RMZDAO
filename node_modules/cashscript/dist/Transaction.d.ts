import { WalletTemplate } from '@bitauth/libauth';
import { AbiFunction } from '@cashscript/utils';
import { Utxo, Output, Recipient, TokenDetails, TransactionDetails, Unlocker } from './interfaces.js';
import SignatureTemplate from './SignatureTemplate.js';
import { Contract } from './Contract.js';
import { DebugResult } from './debugging.js';
import { EncodedFunctionArgument } from './Argument.js';
export declare class Transaction {
    contract: Contract;
    private unlocker;
    abiFunction: AbiFunction;
    encodedFunctionArgs: EncodedFunctionArgument[];
    private selector?;
    inputs: Utxo[];
    outputs: Output[];
    private sequence;
    private locktime;
    private feePerByte;
    private hardcodedFee;
    private minChange;
    private tokenChange;
    constructor(contract: Contract, unlocker: Unlocker, abiFunction: AbiFunction, encodedFunctionArgs: EncodedFunctionArgument[], selector?: number | undefined);
    from(input: Utxo): this;
    from(inputs: Utxo[]): this;
    fromP2PKH(input: Utxo, template: SignatureTemplate): this;
    fromP2PKH(inputs: Utxo[], template: SignatureTemplate): this;
    to(to: string, amount: bigint, token?: TokenDetails): this;
    to(outputs: Recipient[]): this;
    withOpReturn(chunks: string[]): this;
    withAge(age: number): this;
    withTime(time: number): this;
    withHardcodedFee(hardcodedFee: bigint): this;
    withFeePerByte(feePerByte: number): this;
    withMinChange(minChange: bigint): this;
    withoutChange(): this;
    withoutTokenChange(): this;
    build(): Promise<string>;
    send(): Promise<TransactionDetails>;
    send(raw: true): Promise<string>;
    debug(): Promise<DebugResult>;
    bitauthUri(): Promise<string>;
    getLibauthTemplate(): Promise<WalletTemplate>;
    private getTxDetails;
    private setInputsAndOutputs;
}
