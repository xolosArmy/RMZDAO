{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\n// src/index.tsx\nimport React from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\r\n * @license QR Code generator library (TypeScript)\r\n * Copyright (c) Project Nayuki.\r\n * SPDX-License-Identifier: MIT\r\n */\nvar qrcodegen;\n(qrcodegen2 => {\n  const _QrCode = class _QrCode {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code with the given version number,\n    // error correction level, data codeword bytes, and mask number.\n    // This is a low-level API that most users should not use directly.\n    // A mid-level API is the encodeSegments() function.\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      // The modules of this QR Code (false = light, true = dark).\n      // Immutable after constructor finishes. Accessed through getModule().\n      this.modules = [];\n      // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION) throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7) throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++) row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    /*-- Static factory functions (high level) --*/\n    // Returns a QR Code representing the given Unicode text string at the given error correction level.\n    // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n    // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n    // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n    // ecl argument if it can be done without increasing the version.\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    // Returns a QR Code representing the given binary data at the given error correction level.\n    // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n    // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n    // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a QR Code representing the given segments with the given encoding parameters.\n    // The smallest possible QR Code version within the given range is automatically\n    // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n    // may be higher than the ecl argument if it can be done without increasing the\n    // version. The mask number is either between 0 to 7 (inclusive) to force that\n    // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n    // This function allows the user to create a custom sequence of segments that switches\n    // between modes (such as alphanumeric and byte) to encode text in less space.\n    // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n    static encodeSegments(segs, ecl) {\n      let minVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      let maxVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 40;\n      let mask = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n      let boostEcl = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7) throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n      for (version = minVersion;; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion) throw new RangeError(\"Data too long\");\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8) ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData()) bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17) appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length) dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    /*-- Accessor methods --*/\n    // Returns the color of the module (pixel) at the given coordinates, which is false\n    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n    // If the given coordinates are out of bounds, then false (light) is returned.\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    // Modified to expose modules for easy access\n    getModules() {\n      return this.modules;\n    }\n    /*-- Private helper methods for constructor: Drawing function modules --*/\n    // Reads this object's version field, and draws and marks all function modules.\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0)) this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    // Draws two copies of the format bits (with its own error correction code)\n    // based on the given mask and this object's error correction level field.\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++) rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++) this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++) this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++) this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++) this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    // Draws two copies of the version bits (with its own error correction code),\n    // based on this object's version field, iff 7 <= version <= 40.\n    drawVersion() {\n      if (this.version < 7) return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++) rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    // Draws a 9*9 finder pattern including the border separator,\n    // with the center module at (x, y). Modules can be out of bounds.\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size) this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    // Draws a 5*5 alignment pattern, with the center module\n    // at (x, y). All modules must be in bounds.\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++) this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    // Sets the color of a module and marks it as a function module.\n    // Only used by the constructor. Coordinates must be in bounds.\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    /*-- Private helper methods for constructor: Codewords and masking --*/\n    // Returns a new byte string representing the given data with the appropriate error correction\n    // codewords appended to it, based on this object's version and error correction level.\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl)) throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks) dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks) result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n    // data area of this QR Code. Function modules need to be marked off before this is called.\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8)) throw new RangeError(\"Invalid argument\");\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6) right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    // XORs the codeword modules in this QR Code with the given mask pattern.\n    // The function modules must be marked and the codeword bits must be drawn\n    // before masking. Due to the arithmetic of XOR, calling applyMask() with\n    // the same mask value a second time will undo the mask. A final well-formed\n    // QR Code needs exactly one (not zero, two, etc.) mask applied.\n    applyMask(mask) {\n      if (mask < 0 || mask > 7) throw new RangeError(\"Mask value out of range\");\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error(\"Unreachable\");\n          }\n          if (!this.isFunction[y][x] && invert) this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    // Calculates and returns the penalty score based on state of this QR Code's current modules.\n    // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5) result += _QrCode.PENALTY_N1;else if (runX > 5) result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5) result += _QrCode.PENALTY_N1;else if (runY > 5) result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1]) result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules) dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    /*-- Private helper functions --*/\n    // Returns an ascending list of positions of alignment patterns for this version number.\n    // Each position is in the range [0,177), and are used on both the x and y axes.\n    // This could be implemented as lookup table of 40 variable-length lists of integers.\n    getAlignmentPatternPositions() {\n      if (this.version == 1) return [];else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step) result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n    // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n    // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION) throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7) result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n    // QR Code of the given version number and error correction level, with remainder bits discarded.\n    // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n    // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255) throw new RangeError(\"Degree out of range\");\n      let result = [];\n      for (let i = 0; i < degree - 1; i++) result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length) result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map(_ => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n    // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0) throw new RangeError(\"Byte out of range\");\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    // Can only be called immediately after a light run is added, and\n    // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0) currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  /*-- Constants and tables --*/\n  // The minimum version number supported in the QR Code Model 2 standard.\n  _QrCode.MIN_VERSION = 1;\n  // The maximum version number supported in the QR Code Model 2 standard.\n  _QrCode.MAX_VERSION = 40;\n  // For use in getPenaltyScore(), when evaluating which mask is best.\n  _QrCode.PENALTY_N1 = 3;\n  _QrCode.PENALTY_N2 = 3;\n  _QrCode.PENALTY_N3 = 40;\n  _QrCode.PENALTY_N4 = 10;\n  _QrCode.ECC_CODEWORDS_PER_BLOCK = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Low\n  [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n  // Medium\n  [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Quartile\n  [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n  // High\n  ];\n  _QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n  // Low\n  [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n  // Medium\n  [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n  // Quartile\n  [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n  // High\n  ];\n  let QrCode = _QrCode;\n  qrcodegen2.QrCode = _QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0) throw new RangeError(\"Value out of range\");\n    for (let i = len - 1; i >= 0; i--) bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond) throw new Error(\"Assertion error\");\n  }\n  const _QrSegment = class _QrSegment {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code segment with the given attributes and data.\n    // The character count (numChars) must agree with the mode and the bit buffer length,\n    // but the constraint isn't checked. The given bit buffer is cloned and stored.\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0) throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a segment representing the given binary data encoded in\n    // byte mode. All input byte arrays are acceptable. Any text string\n    // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data) appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits)) throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n      for (let i = 0; i < digits.length;) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    // Returns a segment representing the given text string encoded in alphanumeric mode.\n    // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n    // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text)) throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length) appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n    // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n    static makeSegments(text) {\n      if (text == \"\") return [];else if (_QrSegment.isNumeric(text)) return [_QrSegment.makeNumeric(text)];else if (_QrSegment.isAlphanumeric(text)) return [_QrSegment.makeAlphanumeric(text)];else return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    // Returns a segment representing an Extended Channel Interpretation\n    // (ECI) designator with the given assignment value.\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0) throw new RangeError(\"ECI assignment value out of range\");else if (assignVal < 1 << 7) appendBits(assignVal, 8, bb);else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    // Tests whether the given string can be encoded as a segment in numeric mode.\n    // A string is encodable iff each character is in the range 0 to 9.\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n    // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n    // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    /*-- Methods --*/\n    // Returns a new copy of the data bits of this segment.\n    getData() {\n      return this.bitData.slice();\n    }\n    // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n    // the given version. The result is infinity if a segment has too many characters to fit its length field.\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits) return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    // Returns a new array of bytes representing the given string encoded in UTF-8.\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\") result.push(str.charCodeAt(i));else {\n          result.push(parseInt(str.substring(i + 1, i + 3), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  /*-- Constants --*/\n  // Describes precisely all strings that are encodable in numeric mode.\n  _QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  // Describes precisely all strings that are encodable in alphanumeric mode.\n  _QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  // The set of all legal characters in alphanumeric mode,\n  // where each character value maps to the index in the string.\n  _QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  let QrSegment = _QrSegment;\n  qrcodegen2.QrSegment = _QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n(qrcodegen2 => {\n  let QrCode;\n  (QrCode2 => {\n    const _Ecc = class _Ecc {\n      // The QR Code can tolerate about 30% erroneous codewords\n      /*-- Constructor and fields --*/\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    /*-- Constants --*/\n    _Ecc.LOW = new _Ecc(0, 1);\n    // The QR Code can tolerate about  7% erroneous codewords\n    _Ecc.MEDIUM = new _Ecc(1, 0);\n    // The QR Code can tolerate about 15% erroneous codewords\n    _Ecc.QUARTILE = new _Ecc(2, 3);\n    // The QR Code can tolerate about 25% erroneous codewords\n    _Ecc.HIGH = new _Ecc(3, 2);\n    let Ecc = _Ecc;\n    QrCode2.Ecc = _Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n(qrcodegen2 => {\n  let QrSegment;\n  (QrSegment2 => {\n    const _Mode = class _Mode {\n      /*-- Constructor and fields --*/\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      /*-- Method --*/\n      // (Package-private) Returns the bit width of the character count field for a segment in\n      // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    /*-- Constants --*/\n    _Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    _Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    _Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    _Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    _Mode.ECI = new _Mode(7, [0, 0, 0]);\n    let Mode = _Mode;\n    QrSegment2.Mode = _Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\r\n * @license qrcode.react\r\n * Copyright (c) Paul O'Shannessy\r\n * SPDX-License-Identifier: ISC\r\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar DEFAULT_MINVERSION = 1;\nvar SPEC_MARGIN_SIZE = 4;\nvar DEFAULT_MARGIN_SIZE = 0;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules) {\n  let margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const ops = [];\n  modules.forEach(function (row, y) {\n    let start = null;\n    row.forEach(function (cell, x) {\n      if (!cell && start !== null) {\n        ops.push(\"M\".concat(start + margin, \" \").concat(y + margin, \"h\").concat(x - start, \"v1H\").concat(start + margin, \"z\"));\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(\"M\".concat(x + margin, \",\").concat(y + margin, \" h1v1H\").concat(x + margin, \"z\"));\n        } else {\n          ops.push(\"M\".concat(start + margin, \",\").concat(y + margin, \" h\").concat(x + 1 - start, \"v1H\").concat(start + margin, \"z\"));\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, margin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  const opacity = imageSettings.opacity == null ? 1 : imageSettings.opacity;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = {\n      x: floorX,\n      y: floorY,\n      w: ceilW,\n      h: ceilH\n    };\n  }\n  const crossOrigin = imageSettings.crossOrigin;\n  return {\n    x,\n    y,\n    h,\n    w,\n    excavation,\n    opacity,\n    crossOrigin\n  };\n}\nfunction getMarginSize(includeMargin, marginSize) {\n  if (marginSize != null) {\n    return Math.max(Math.floor(marginSize), 0);\n  }\n  return includeMargin ? SPEC_MARGIN_SIZE : DEFAULT_MARGIN_SIZE;\n}\nfunction useQRCode(_ref) {\n  let {\n    value,\n    level,\n    minVersion,\n    includeMargin,\n    marginSize,\n    imageSettings,\n    size,\n    boostLevel\n  } = _ref;\n  let qrcode = React.useMemo(() => {\n    const values = Array.isArray(value) ? value : [value];\n    const segments = values.reduce((accum, v) => {\n      accum.push(...qrcodegen_default.QrSegment.makeSegments(v));\n      return accum;\n    }, []);\n    return qrcodegen_default.QrCode.encodeSegments(segments, ERROR_LEVEL_MAP[level], minVersion, void 0, void 0, boostLevel);\n  }, [value, level, minVersion, boostLevel]);\n  const {\n    cells,\n    margin,\n    numCells,\n    calculatedImageSettings\n  } = React.useMemo(() => {\n    let cells2 = qrcode.getModules();\n    const margin2 = getMarginSize(includeMargin, marginSize);\n    const numCells2 = cells2.length + margin2 * 2;\n    const calculatedImageSettings2 = getImageSettings(cells2, size, margin2, imageSettings);\n    return {\n      cells: cells2,\n      margin: margin2,\n      numCells: numCells2,\n      calculatedImageSettings: calculatedImageSettings2\n    };\n  }, [qrcode, size, imageSettings, includeMargin, marginSize]);\n  return {\n    qrcode,\n    margin,\n    cells,\n    numCells,\n    calculatedImageSettings\n  };\n}\nvar SUPPORTS_PATH2D = function () {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nvar QRCodeCanvas = React.forwardRef(function QRCodeCanvas2(props, forwardedRef) {\n  const _a = props,\n    {\n      value,\n      size = DEFAULT_SIZE,\n      level = DEFAULT_LEVEL,\n      bgColor = DEFAULT_BGCOLOR,\n      fgColor = DEFAULT_FGCOLOR,\n      includeMargin = DEFAULT_INCLUDEMARGIN,\n      minVersion = DEFAULT_MINVERSION,\n      boostLevel,\n      marginSize,\n      imageSettings\n    } = _a,\n    extraProps = __objRest(_a, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\", \"includeMargin\", \"minVersion\", \"boostLevel\", \"marginSize\", \"imageSettings\"]);\n  const _b = extraProps,\n    {\n      style\n    } = _b,\n    otherProps = __objRest(_b, [\"style\"]);\n  const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n  const _canvas = React.useRef(null);\n  const _image = React.useRef(null);\n  const setCanvasRef = React.useCallback(node => {\n    _canvas.current = node;\n    if (typeof forwardedRef === \"function\") {\n      forwardedRef(node);\n    } else if (forwardedRef) {\n      forwardedRef.current = node;\n    }\n  }, [forwardedRef]);\n  const [isImgLoaded, setIsImageLoaded] = React.useState(false);\n  const {\n    margin,\n    cells,\n    numCells,\n    calculatedImageSettings\n  } = useQRCode({\n    value,\n    level,\n    minVersion,\n    boostLevel,\n    includeMargin,\n    marginSize,\n    imageSettings,\n    size\n  });\n  React.useEffect(() => {\n    if (_canvas.current != null) {\n      const canvas = _canvas.current;\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        return;\n      }\n      let cellsToDraw = cells;\n      const image = _image.current;\n      const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n      if (haveImageToRender) {\n        if (calculatedImageSettings.excavation != null) {\n          cellsToDraw = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n      }\n      const pixelRatio = window.devicePixelRatio || 1;\n      canvas.height = canvas.width = size * pixelRatio;\n      const scale = size / numCells * pixelRatio;\n      ctx.scale(scale, scale);\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(0, 0, numCells, numCells);\n      ctx.fillStyle = fgColor;\n      if (SUPPORTS_PATH2D) {\n        ctx.fill(new Path2D(generatePath(cellsToDraw, margin)));\n      } else {\n        cells.forEach(function (row, rdx) {\n          row.forEach(function (cell, cdx) {\n            if (cell) {\n              ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n            }\n          });\n        });\n      }\n      if (calculatedImageSettings) {\n        ctx.globalAlpha = calculatedImageSettings.opacity;\n      }\n      if (haveImageToRender) {\n        ctx.drawImage(image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);\n      }\n    }\n  });\n  React.useEffect(() => {\n    setIsImageLoaded(false);\n  }, [imgSrc]);\n  const canvasStyle = __spreadValues({\n    height: size,\n    width: size\n  }, style);\n  let img = null;\n  if (imgSrc != null) {\n    img = /* @__PURE__ */React.createElement(\"img\", {\n      src: imgSrc,\n      key: imgSrc,\n      style: {\n        display: \"none\"\n      },\n      onLoad: () => {\n        setIsImageLoaded(true);\n      },\n      ref: _image,\n      crossOrigin: calculatedImageSettings == null ? void 0 : calculatedImageSettings.crossOrigin\n    });\n  }\n  return /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement(\"canvas\", __spreadValues({\n    style: canvasStyle,\n    height: size,\n    width: size,\n    ref: setCanvasRef,\n    role: \"img\"\n  }, otherProps)), img);\n});\nQRCodeCanvas.displayName = \"QRCodeCanvas\";\nvar QRCodeSVG = React.forwardRef(function QRCodeSVG2(props, forwardedRef) {\n  const _a = props,\n    {\n      value,\n      size = DEFAULT_SIZE,\n      level = DEFAULT_LEVEL,\n      bgColor = DEFAULT_BGCOLOR,\n      fgColor = DEFAULT_FGCOLOR,\n      includeMargin = DEFAULT_INCLUDEMARGIN,\n      minVersion = DEFAULT_MINVERSION,\n      boostLevel,\n      title,\n      marginSize,\n      imageSettings\n    } = _a,\n    otherProps = __objRest(_a, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\", \"includeMargin\", \"minVersion\", \"boostLevel\", \"title\", \"marginSize\", \"imageSettings\"]);\n  const {\n    margin,\n    cells,\n    numCells,\n    calculatedImageSettings\n  } = useQRCode({\n    value,\n    level,\n    minVersion,\n    boostLevel,\n    includeMargin,\n    marginSize,\n    imageSettings,\n    size\n  });\n  let cellsToDraw = cells;\n  let image = null;\n  if (imageSettings != null && calculatedImageSettings != null) {\n    if (calculatedImageSettings.excavation != null) {\n      cellsToDraw = excavateModules(cells, calculatedImageSettings.excavation);\n    }\n    image = /* @__PURE__ */React.createElement(\"image\", {\n      href: imageSettings.src,\n      height: calculatedImageSettings.h,\n      width: calculatedImageSettings.w,\n      x: calculatedImageSettings.x + margin,\n      y: calculatedImageSettings.y + margin,\n      preserveAspectRatio: \"none\",\n      opacity: calculatedImageSettings.opacity,\n      crossOrigin: calculatedImageSettings.crossOrigin\n    });\n  }\n  const fgPath = generatePath(cellsToDraw, margin);\n  return /* @__PURE__ */React.createElement(\"svg\", __spreadValues({\n    height: size,\n    width: size,\n    viewBox: \"0 0 \".concat(numCells, \" \").concat(numCells),\n    ref: forwardedRef,\n    role: \"img\"\n  }, otherProps), !!title && /* @__PURE__ */React.createElement(\"title\", null, title), /* @__PURE__ */React.createElement(\"path\", {\n    fill: bgColor,\n    d: \"M0,0 h\".concat(numCells, \"v\").concat(numCells, \"H0z\"),\n    shapeRendering: \"crispEdges\"\n  }), /* @__PURE__ */React.createElement(\"path\", {\n    fill: fgColor,\n    d: fgPath,\n    shapeRendering: \"crispEdges\"\n  }), image);\n});\nQRCodeSVG.displayName = \"QRCodeSVG\";\nexport { QRCodeCanvas, QRCodeSVG };","map":{"version":3,"names":["__defProp","Object","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__objRest","source","exclude","target","indexOf","React","qrcodegen","qrcodegen2","_QrCode","constructor","version","errorCorrectionLevel","dataCodewords","msk","modules","isFunction","MIN_VERSION","MAX_VERSION","RangeError","size","row","i","push","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","assert","mask","encodeText","text","ecl","segs","QrSegment","makeSegments","encodeSegments","encodeBinary","data","seg","makeBytes","minVersion","arguments","length","undefined","maxVersion","boostEcl","dataUsedBits","dataCapacityBits2","getNumDataCodewords","usedBits","getTotalBits","newEcl","Ecc","MEDIUM","QUARTILE","HIGH","bb","appendBits","mode","modeBits","numChars","numCharCountBits","getData","dataCapacityBits","Math","min","padByte","forEach","getModule","x","y","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","formatBits","rem","bits","getBit","color","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","block","right","vert","upward","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","degree","root","reedSolomonMultiply","divisor","map","_","factor","shift","coef","z","n","core","currentRunColor","currentRunLength","pop","unshift","QrCode","val","len","cond","_QrSegment","bitData","Mode","BYTE","makeNumeric","digits","isNumeric","parseInt","substring","NUMERIC","makeAlphanumeric","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","charAt","ALPHANUMERIC","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","ccbits","Infinity","str","encodeURI","charCodeAt","QrCode2","_Ecc","LOW","QrSegment2","_Mode","numBitsCharCount","KANJI","qrcodegen_default","ERROR_LEVEL_MAP","L","M","Q","H","DEFAULT_SIZE","DEFAULT_LEVEL","DEFAULT_BGCOLOR","DEFAULT_FGCOLOR","DEFAULT_INCLUDEMARGIN","DEFAULT_MINVERSION","SPEC_MARGIN_SIZE","DEFAULT_MARGIN_SIZE","DEFAULT_IMG_SCALE","generatePath","margin","ops","start","cell","join","excavateModules","excavation","h","w","getImageSettings","cells","imageSettings","numCells","defaultSize","scale","width","height","opacity","excavate","floorX","floorY","ceilW","ceilH","crossOrigin","getMarginSize","includeMargin","marginSize","useQRCode","_ref","level","boostLevel","qrcode","useMemo","values","Array","isArray","segments","accum","v","calculatedImageSettings","cells2","margin2","numCells2","calculatedImageSettings2","SUPPORTS_PATH2D","Path2D","addPath","e","QRCodeCanvas","forwardRef","QRCodeCanvas2","props","forwardedRef","_a","bgColor","fgColor","extraProps","_b","style","otherProps","imgSrc","src","_canvas","useRef","_image","setCanvasRef","useCallback","node","current","isImgLoaded","setIsImageLoaded","useState","useEffect","canvas","ctx","getContext","cellsToDraw","image","haveImageToRender","complete","naturalHeight","naturalWidth","pixelRatio","window","devicePixelRatio","fillStyle","fillRect","fill","rdx","cdx","globalAlpha","drawImage","canvasStyle","img","createElement","display","onLoad","ref","Fragment","role","displayName","QRCodeSVG","QRCodeSVG2","title","href","preserveAspectRatio","fgPath","viewBox","d","shapeRendering"],"sources":["C:/Users/ferra/Documents/RMZDAO/RMZDAO/rmzdao-ui/node_modules/qrcode.react/lib/esm/index.js"],"sourcesContent":["var __defProp = Object.defineProperty;\r\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\r\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\r\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\r\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __spreadValues = (a, b) => {\r\n  for (var prop in b || (b = {}))\r\n    if (__hasOwnProp.call(b, prop))\r\n      __defNormalProp(a, prop, b[prop]);\r\n  if (__getOwnPropSymbols)\r\n    for (var prop of __getOwnPropSymbols(b)) {\r\n      if (__propIsEnum.call(b, prop))\r\n        __defNormalProp(a, prop, b[prop]);\r\n    }\r\n  return a;\r\n};\r\nvar __objRest = (source, exclude) => {\r\n  var target = {};\r\n  for (var prop in source)\r\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\r\n      target[prop] = source[prop];\r\n  if (source != null && __getOwnPropSymbols)\r\n    for (var prop of __getOwnPropSymbols(source)) {\r\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\r\n        target[prop] = source[prop];\r\n    }\r\n  return target;\r\n};\r\n\r\n// src/index.tsx\r\nimport React from \"react\";\r\n\r\n// src/third-party/qrcodegen/index.ts\r\n/**\r\n * @license QR Code generator library (TypeScript)\r\n * Copyright (c) Project Nayuki.\r\n * SPDX-License-Identifier: MIT\r\n */\r\nvar qrcodegen;\r\n((qrcodegen2) => {\r\n  const _QrCode = class _QrCode {\r\n    /*-- Constructor (low level) and fields --*/\r\n    // Creates a new QR Code with the given version number,\r\n    // error correction level, data codeword bytes, and mask number.\r\n    // This is a low-level API that most users should not use directly.\r\n    // A mid-level API is the encodeSegments() function.\r\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\r\n      this.version = version;\r\n      this.errorCorrectionLevel = errorCorrectionLevel;\r\n      // The modules of this QR Code (false = light, true = dark).\r\n      // Immutable after constructor finishes. Accessed through getModule().\r\n      this.modules = [];\r\n      // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\r\n      this.isFunction = [];\r\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\r\n        throw new RangeError(\"Version value out of range\");\r\n      if (msk < -1 || msk > 7)\r\n        throw new RangeError(\"Mask value out of range\");\r\n      this.size = version * 4 + 17;\r\n      let row = [];\r\n      for (let i = 0; i < this.size; i++)\r\n        row.push(false);\r\n      for (let i = 0; i < this.size; i++) {\r\n        this.modules.push(row.slice());\r\n        this.isFunction.push(row.slice());\r\n      }\r\n      this.drawFunctionPatterns();\r\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\r\n      this.drawCodewords(allCodewords);\r\n      if (msk == -1) {\r\n        let minPenalty = 1e9;\r\n        for (let i = 0; i < 8; i++) {\r\n          this.applyMask(i);\r\n          this.drawFormatBits(i);\r\n          const penalty = this.getPenaltyScore();\r\n          if (penalty < minPenalty) {\r\n            msk = i;\r\n            minPenalty = penalty;\r\n          }\r\n          this.applyMask(i);\r\n        }\r\n      }\r\n      assert(0 <= msk && msk <= 7);\r\n      this.mask = msk;\r\n      this.applyMask(msk);\r\n      this.drawFormatBits(msk);\r\n      this.isFunction = [];\r\n    }\r\n    /*-- Static factory functions (high level) --*/\r\n    // Returns a QR Code representing the given Unicode text string at the given error correction level.\r\n    // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\r\n    // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\r\n    // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\r\n    // ecl argument if it can be done without increasing the version.\r\n    static encodeText(text, ecl) {\r\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\r\n      return _QrCode.encodeSegments(segs, ecl);\r\n    }\r\n    // Returns a QR Code representing the given binary data at the given error correction level.\r\n    // This function always encodes using the binary segment mode, not any text mode. The maximum number of\r\n    // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\r\n    // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\r\n    static encodeBinary(data, ecl) {\r\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\r\n      return _QrCode.encodeSegments([seg], ecl);\r\n    }\r\n    /*-- Static factory functions (mid level) --*/\r\n    // Returns a QR Code representing the given segments with the given encoding parameters.\r\n    // The smallest possible QR Code version within the given range is automatically\r\n    // chosen for the output. Iff boostEcl is true, then the ECC level of the result\r\n    // may be higher than the ecl argument if it can be done without increasing the\r\n    // version. The mask number is either between 0 to 7 (inclusive) to force that\r\n    // mask, or -1 to automatically choose an appropriate mask (which may be slow).\r\n    // This function allows the user to create a custom sequence of segments that switches\r\n    // between modes (such as alphanumeric and byte) to encode text in less space.\r\n    // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\r\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\r\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\r\n        throw new RangeError(\"Invalid value\");\r\n      let version;\r\n      let dataUsedBits;\r\n      for (version = minVersion; ; version++) {\r\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\r\n        const usedBits = QrSegment.getTotalBits(segs, version);\r\n        if (usedBits <= dataCapacityBits2) {\r\n          dataUsedBits = usedBits;\r\n          break;\r\n        }\r\n        if (version >= maxVersion)\r\n          throw new RangeError(\"Data too long\");\r\n      }\r\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\r\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\r\n          ecl = newEcl;\r\n      }\r\n      let bb = [];\r\n      for (const seg of segs) {\r\n        appendBits(seg.mode.modeBits, 4, bb);\r\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\r\n        for (const b of seg.getData())\r\n          bb.push(b);\r\n      }\r\n      assert(bb.length == dataUsedBits);\r\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\r\n      assert(bb.length <= dataCapacityBits);\r\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\r\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\r\n      assert(bb.length % 8 == 0);\r\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\r\n        appendBits(padByte, 8, bb);\r\n      let dataCodewords = [];\r\n      while (dataCodewords.length * 8 < bb.length)\r\n        dataCodewords.push(0);\r\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\r\n      return new _QrCode(version, ecl, dataCodewords, mask);\r\n    }\r\n    /*-- Accessor methods --*/\r\n    // Returns the color of the module (pixel) at the given coordinates, which is false\r\n    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\r\n    // If the given coordinates are out of bounds, then false (light) is returned.\r\n    getModule(x, y) {\r\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\r\n    }\r\n    // Modified to expose modules for easy access\r\n    getModules() {\r\n      return this.modules;\r\n    }\r\n    /*-- Private helper methods for constructor: Drawing function modules --*/\r\n    // Reads this object's version field, and draws and marks all function modules.\r\n    drawFunctionPatterns() {\r\n      for (let i = 0; i < this.size; i++) {\r\n        this.setFunctionModule(6, i, i % 2 == 0);\r\n        this.setFunctionModule(i, 6, i % 2 == 0);\r\n      }\r\n      this.drawFinderPattern(3, 3);\r\n      this.drawFinderPattern(this.size - 4, 3);\r\n      this.drawFinderPattern(3, this.size - 4);\r\n      const alignPatPos = this.getAlignmentPatternPositions();\r\n      const numAlign = alignPatPos.length;\r\n      for (let i = 0; i < numAlign; i++) {\r\n        for (let j = 0; j < numAlign; j++) {\r\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\r\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\r\n        }\r\n      }\r\n      this.drawFormatBits(0);\r\n      this.drawVersion();\r\n    }\r\n    // Draws two copies of the format bits (with its own error correction code)\r\n    // based on the given mask and this object's error correction level field.\r\n    drawFormatBits(mask) {\r\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\r\n      let rem = data;\r\n      for (let i = 0; i < 10; i++)\r\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\r\n      const bits = (data << 10 | rem) ^ 21522;\r\n      assert(bits >>> 15 == 0);\r\n      for (let i = 0; i <= 5; i++)\r\n        this.setFunctionModule(8, i, getBit(bits, i));\r\n      this.setFunctionModule(8, 7, getBit(bits, 6));\r\n      this.setFunctionModule(8, 8, getBit(bits, 7));\r\n      this.setFunctionModule(7, 8, getBit(bits, 8));\r\n      for (let i = 9; i < 15; i++)\r\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\r\n      for (let i = 0; i < 8; i++)\r\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\r\n      for (let i = 8; i < 15; i++)\r\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\r\n      this.setFunctionModule(8, this.size - 8, true);\r\n    }\r\n    // Draws two copies of the version bits (with its own error correction code),\r\n    // based on this object's version field, iff 7 <= version <= 40.\r\n    drawVersion() {\r\n      if (this.version < 7)\r\n        return;\r\n      let rem = this.version;\r\n      for (let i = 0; i < 12; i++)\r\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\r\n      const bits = this.version << 12 | rem;\r\n      assert(bits >>> 18 == 0);\r\n      for (let i = 0; i < 18; i++) {\r\n        const color = getBit(bits, i);\r\n        const a = this.size - 11 + i % 3;\r\n        const b = Math.floor(i / 3);\r\n        this.setFunctionModule(a, b, color);\r\n        this.setFunctionModule(b, a, color);\r\n      }\r\n    }\r\n    // Draws a 9*9 finder pattern including the border separator,\r\n    // with the center module at (x, y). Modules can be out of bounds.\r\n    drawFinderPattern(x, y) {\r\n      for (let dy = -4; dy <= 4; dy++) {\r\n        for (let dx = -4; dx <= 4; dx++) {\r\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\r\n          const xx = x + dx;\r\n          const yy = y + dy;\r\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\r\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\r\n        }\r\n      }\r\n    }\r\n    // Draws a 5*5 alignment pattern, with the center module\r\n    // at (x, y). All modules must be in bounds.\r\n    drawAlignmentPattern(x, y) {\r\n      for (let dy = -2; dy <= 2; dy++) {\r\n        for (let dx = -2; dx <= 2; dx++)\r\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\r\n      }\r\n    }\r\n    // Sets the color of a module and marks it as a function module.\r\n    // Only used by the constructor. Coordinates must be in bounds.\r\n    setFunctionModule(x, y, isDark) {\r\n      this.modules[y][x] = isDark;\r\n      this.isFunction[y][x] = true;\r\n    }\r\n    /*-- Private helper methods for constructor: Codewords and masking --*/\r\n    // Returns a new byte string representing the given data with the appropriate error correction\r\n    // codewords appended to it, based on this object's version and error correction level.\r\n    addEccAndInterleave(data) {\r\n      const ver = this.version;\r\n      const ecl = this.errorCorrectionLevel;\r\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\r\n        throw new RangeError(\"Invalid argument\");\r\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\r\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\r\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\r\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\r\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\r\n      let blocks = [];\r\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\r\n      for (let i = 0, k = 0; i < numBlocks; i++) {\r\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\r\n        k += dat.length;\r\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\r\n        if (i < numShortBlocks)\r\n          dat.push(0);\r\n        blocks.push(dat.concat(ecc));\r\n      }\r\n      let result = [];\r\n      for (let i = 0; i < blocks[0].length; i++) {\r\n        blocks.forEach((block, j) => {\r\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\r\n            result.push(block[i]);\r\n        });\r\n      }\r\n      assert(result.length == rawCodewords);\r\n      return result;\r\n    }\r\n    // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\r\n    // data area of this QR Code. Function modules need to be marked off before this is called.\r\n    drawCodewords(data) {\r\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\r\n        throw new RangeError(\"Invalid argument\");\r\n      let i = 0;\r\n      for (let right = this.size - 1; right >= 1; right -= 2) {\r\n        if (right == 6)\r\n          right = 5;\r\n        for (let vert = 0; vert < this.size; vert++) {\r\n          for (let j = 0; j < 2; j++) {\r\n            const x = right - j;\r\n            const upward = (right + 1 & 2) == 0;\r\n            const y = upward ? this.size - 1 - vert : vert;\r\n            if (!this.isFunction[y][x] && i < data.length * 8) {\r\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\r\n              i++;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      assert(i == data.length * 8);\r\n    }\r\n    // XORs the codeword modules in this QR Code with the given mask pattern.\r\n    // The function modules must be marked and the codeword bits must be drawn\r\n    // before masking. Due to the arithmetic of XOR, calling applyMask() with\r\n    // the same mask value a second time will undo the mask. A final well-formed\r\n    // QR Code needs exactly one (not zero, two, etc.) mask applied.\r\n    applyMask(mask) {\r\n      if (mask < 0 || mask > 7)\r\n        throw new RangeError(\"Mask value out of range\");\r\n      for (let y = 0; y < this.size; y++) {\r\n        for (let x = 0; x < this.size; x++) {\r\n          let invert;\r\n          switch (mask) {\r\n            case 0:\r\n              invert = (x + y) % 2 == 0;\r\n              break;\r\n            case 1:\r\n              invert = y % 2 == 0;\r\n              break;\r\n            case 2:\r\n              invert = x % 3 == 0;\r\n              break;\r\n            case 3:\r\n              invert = (x + y) % 3 == 0;\r\n              break;\r\n            case 4:\r\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\r\n              break;\r\n            case 5:\r\n              invert = x * y % 2 + x * y % 3 == 0;\r\n              break;\r\n            case 6:\r\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\r\n              break;\r\n            case 7:\r\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\r\n              break;\r\n            default:\r\n              throw new Error(\"Unreachable\");\r\n          }\r\n          if (!this.isFunction[y][x] && invert)\r\n            this.modules[y][x] = !this.modules[y][x];\r\n        }\r\n      }\r\n    }\r\n    // Calculates and returns the penalty score based on state of this QR Code's current modules.\r\n    // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\r\n    getPenaltyScore() {\r\n      let result = 0;\r\n      for (let y = 0; y < this.size; y++) {\r\n        let runColor = false;\r\n        let runX = 0;\r\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\r\n        for (let x = 0; x < this.size; x++) {\r\n          if (this.modules[y][x] == runColor) {\r\n            runX++;\r\n            if (runX == 5)\r\n              result += _QrCode.PENALTY_N1;\r\n            else if (runX > 5)\r\n              result++;\r\n          } else {\r\n            this.finderPenaltyAddHistory(runX, runHistory);\r\n            if (!runColor)\r\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\r\n            runColor = this.modules[y][x];\r\n            runX = 1;\r\n          }\r\n        }\r\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\r\n      }\r\n      for (let x = 0; x < this.size; x++) {\r\n        let runColor = false;\r\n        let runY = 0;\r\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\r\n        for (let y = 0; y < this.size; y++) {\r\n          if (this.modules[y][x] == runColor) {\r\n            runY++;\r\n            if (runY == 5)\r\n              result += _QrCode.PENALTY_N1;\r\n            else if (runY > 5)\r\n              result++;\r\n          } else {\r\n            this.finderPenaltyAddHistory(runY, runHistory);\r\n            if (!runColor)\r\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\r\n            runColor = this.modules[y][x];\r\n            runY = 1;\r\n          }\r\n        }\r\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\r\n      }\r\n      for (let y = 0; y < this.size - 1; y++) {\r\n        for (let x = 0; x < this.size - 1; x++) {\r\n          const color = this.modules[y][x];\r\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\r\n            result += _QrCode.PENALTY_N2;\r\n        }\r\n      }\r\n      let dark = 0;\r\n      for (const row of this.modules)\r\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\r\n      const total = this.size * this.size;\r\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\r\n      assert(0 <= k && k <= 9);\r\n      result += k * _QrCode.PENALTY_N4;\r\n      assert(0 <= result && result <= 2568888);\r\n      return result;\r\n    }\r\n    /*-- Private helper functions --*/\r\n    // Returns an ascending list of positions of alignment patterns for this version number.\r\n    // Each position is in the range [0,177), and are used on both the x and y axes.\r\n    // This could be implemented as lookup table of 40 variable-length lists of integers.\r\n    getAlignmentPatternPositions() {\r\n      if (this.version == 1)\r\n        return [];\r\n      else {\r\n        const numAlign = Math.floor(this.version / 7) + 2;\r\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\r\n        let result = [6];\r\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\r\n          result.splice(1, 0, pos);\r\n        return result;\r\n      }\r\n    }\r\n    // Returns the number of data bits that can be stored in a QR Code of the given version number, after\r\n    // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\r\n    // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\r\n    static getNumRawDataModules(ver) {\r\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\r\n        throw new RangeError(\"Version number out of range\");\r\n      let result = (16 * ver + 128) * ver + 64;\r\n      if (ver >= 2) {\r\n        const numAlign = Math.floor(ver / 7) + 2;\r\n        result -= (25 * numAlign - 10) * numAlign - 55;\r\n        if (ver >= 7)\r\n          result -= 36;\r\n      }\r\n      assert(208 <= result && result <= 29648);\r\n      return result;\r\n    }\r\n    // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\r\n    // QR Code of the given version number and error correction level, with remainder bits discarded.\r\n    // This stateless pure function could be implemented as a (40*4)-cell lookup table.\r\n    static getNumDataCodewords(ver, ecl) {\r\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\r\n    }\r\n    // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\r\n    // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\r\n    static reedSolomonComputeDivisor(degree) {\r\n      if (degree < 1 || degree > 255)\r\n        throw new RangeError(\"Degree out of range\");\r\n      let result = [];\r\n      for (let i = 0; i < degree - 1; i++)\r\n        result.push(0);\r\n      result.push(1);\r\n      let root = 1;\r\n      for (let i = 0; i < degree; i++) {\r\n        for (let j = 0; j < result.length; j++) {\r\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\r\n          if (j + 1 < result.length)\r\n            result[j] ^= result[j + 1];\r\n        }\r\n        root = _QrCode.reedSolomonMultiply(root, 2);\r\n      }\r\n      return result;\r\n    }\r\n    // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\r\n    static reedSolomonComputeRemainder(data, divisor) {\r\n      let result = divisor.map((_) => 0);\r\n      for (const b of data) {\r\n        const factor = b ^ result.shift();\r\n        result.push(0);\r\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\r\n      }\r\n      return result;\r\n    }\r\n    // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\r\n    // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\r\n    static reedSolomonMultiply(x, y) {\r\n      if (x >>> 8 != 0 || y >>> 8 != 0)\r\n        throw new RangeError(\"Byte out of range\");\r\n      let z = 0;\r\n      for (let i = 7; i >= 0; i--) {\r\n        z = z << 1 ^ (z >>> 7) * 285;\r\n        z ^= (y >>> i & 1) * x;\r\n      }\r\n      assert(z >>> 8 == 0);\r\n      return z;\r\n    }\r\n    // Can only be called immediately after a light run is added, and\r\n    // returns either 0, 1, or 2. A helper function for getPenaltyScore().\r\n    finderPenaltyCountPatterns(runHistory) {\r\n      const n = runHistory[1];\r\n      assert(n <= this.size * 3);\r\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\r\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\r\n    }\r\n    // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\r\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\r\n      if (currentRunColor) {\r\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\r\n        currentRunLength = 0;\r\n      }\r\n      currentRunLength += this.size;\r\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\r\n      return this.finderPenaltyCountPatterns(runHistory);\r\n    }\r\n    // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\r\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\r\n      if (runHistory[0] == 0)\r\n        currentRunLength += this.size;\r\n      runHistory.pop();\r\n      runHistory.unshift(currentRunLength);\r\n    }\r\n  };\r\n  /*-- Constants and tables --*/\r\n  // The minimum version number supported in the QR Code Model 2 standard.\r\n  _QrCode.MIN_VERSION = 1;\r\n  // The maximum version number supported in the QR Code Model 2 standard.\r\n  _QrCode.MAX_VERSION = 40;\r\n  // For use in getPenaltyScore(), when evaluating which mask is best.\r\n  _QrCode.PENALTY_N1 = 3;\r\n  _QrCode.PENALTY_N2 = 3;\r\n  _QrCode.PENALTY_N3 = 40;\r\n  _QrCode.PENALTY_N4 = 10;\r\n  _QrCode.ECC_CODEWORDS_PER_BLOCK = [\r\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\r\n    //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\r\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\r\n    // Low\r\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\r\n    // Medium\r\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\r\n    // Quartile\r\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\r\n    // High\r\n  ];\r\n  _QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\r\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\r\n    //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\r\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\r\n    // Low\r\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\r\n    // Medium\r\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\r\n    // Quartile\r\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\r\n    // High\r\n  ];\r\n  let QrCode = _QrCode;\r\n  qrcodegen2.QrCode = _QrCode;\r\n  function appendBits(val, len, bb) {\r\n    if (len < 0 || len > 31 || val >>> len != 0)\r\n      throw new RangeError(\"Value out of range\");\r\n    for (let i = len - 1; i >= 0; i--)\r\n      bb.push(val >>> i & 1);\r\n  }\r\n  function getBit(x, i) {\r\n    return (x >>> i & 1) != 0;\r\n  }\r\n  function assert(cond) {\r\n    if (!cond)\r\n      throw new Error(\"Assertion error\");\r\n  }\r\n  const _QrSegment = class _QrSegment {\r\n    /*-- Constructor (low level) and fields --*/\r\n    // Creates a new QR Code segment with the given attributes and data.\r\n    // The character count (numChars) must agree with the mode and the bit buffer length,\r\n    // but the constraint isn't checked. The given bit buffer is cloned and stored.\r\n    constructor(mode, numChars, bitData) {\r\n      this.mode = mode;\r\n      this.numChars = numChars;\r\n      this.bitData = bitData;\r\n      if (numChars < 0)\r\n        throw new RangeError(\"Invalid argument\");\r\n      this.bitData = bitData.slice();\r\n    }\r\n    /*-- Static factory functions (mid level) --*/\r\n    // Returns a segment representing the given binary data encoded in\r\n    // byte mode. All input byte arrays are acceptable. Any text string\r\n    // can be converted to UTF-8 bytes and encoded as a byte mode segment.\r\n    static makeBytes(data) {\r\n      let bb = [];\r\n      for (const b of data)\r\n        appendBits(b, 8, bb);\r\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\r\n    }\r\n    // Returns a segment representing the given string of decimal digits encoded in numeric mode.\r\n    static makeNumeric(digits) {\r\n      if (!_QrSegment.isNumeric(digits))\r\n        throw new RangeError(\"String contains non-numeric characters\");\r\n      let bb = [];\r\n      for (let i = 0; i < digits.length; ) {\r\n        const n = Math.min(digits.length - i, 3);\r\n        appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\r\n        i += n;\r\n      }\r\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\r\n    }\r\n    // Returns a segment representing the given text string encoded in alphanumeric mode.\r\n    // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\r\n    // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\r\n    static makeAlphanumeric(text) {\r\n      if (!_QrSegment.isAlphanumeric(text))\r\n        throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\r\n      let bb = [];\r\n      let i;\r\n      for (i = 0; i + 2 <= text.length; i += 2) {\r\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\r\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\r\n        appendBits(temp, 11, bb);\r\n      }\r\n      if (i < text.length)\r\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\r\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\r\n    }\r\n    // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\r\n    // The result may use various segment modes and switch modes to optimize the length of the bit stream.\r\n    static makeSegments(text) {\r\n      if (text == \"\")\r\n        return [];\r\n      else if (_QrSegment.isNumeric(text))\r\n        return [_QrSegment.makeNumeric(text)];\r\n      else if (_QrSegment.isAlphanumeric(text))\r\n        return [_QrSegment.makeAlphanumeric(text)];\r\n      else\r\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\r\n    }\r\n    // Returns a segment representing an Extended Channel Interpretation\r\n    // (ECI) designator with the given assignment value.\r\n    static makeEci(assignVal) {\r\n      let bb = [];\r\n      if (assignVal < 0)\r\n        throw new RangeError(\"ECI assignment value out of range\");\r\n      else if (assignVal < 1 << 7)\r\n        appendBits(assignVal, 8, bb);\r\n      else if (assignVal < 1 << 14) {\r\n        appendBits(2, 2, bb);\r\n        appendBits(assignVal, 14, bb);\r\n      } else if (assignVal < 1e6) {\r\n        appendBits(6, 3, bb);\r\n        appendBits(assignVal, 21, bb);\r\n      } else\r\n        throw new RangeError(\"ECI assignment value out of range\");\r\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\r\n    }\r\n    // Tests whether the given string can be encoded as a segment in numeric mode.\r\n    // A string is encodable iff each character is in the range 0 to 9.\r\n    static isNumeric(text) {\r\n      return _QrSegment.NUMERIC_REGEX.test(text);\r\n    }\r\n    // Tests whether the given string can be encoded as a segment in alphanumeric mode.\r\n    // A string is encodable iff each character is in the following set: 0 to 9, A to Z\r\n    // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\r\n    static isAlphanumeric(text) {\r\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\r\n    }\r\n    /*-- Methods --*/\r\n    // Returns a new copy of the data bits of this segment.\r\n    getData() {\r\n      return this.bitData.slice();\r\n    }\r\n    // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\r\n    // the given version. The result is infinity if a segment has too many characters to fit its length field.\r\n    static getTotalBits(segs, version) {\r\n      let result = 0;\r\n      for (const seg of segs) {\r\n        const ccbits = seg.mode.numCharCountBits(version);\r\n        if (seg.numChars >= 1 << ccbits)\r\n          return Infinity;\r\n        result += 4 + ccbits + seg.bitData.length;\r\n      }\r\n      return result;\r\n    }\r\n    // Returns a new array of bytes representing the given string encoded in UTF-8.\r\n    static toUtf8ByteArray(str) {\r\n      str = encodeURI(str);\r\n      let result = [];\r\n      for (let i = 0; i < str.length; i++) {\r\n        if (str.charAt(i) != \"%\")\r\n          result.push(str.charCodeAt(i));\r\n        else {\r\n          result.push(parseInt(str.substring(i + 1, i + 3), 16));\r\n          i += 2;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  };\r\n  /*-- Constants --*/\r\n  // Describes precisely all strings that are encodable in numeric mode.\r\n  _QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\r\n  // Describes precisely all strings that are encodable in alphanumeric mode.\r\n  _QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\r\n  // The set of all legal characters in alphanumeric mode,\r\n  // where each character value maps to the index in the string.\r\n  _QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\r\n  let QrSegment = _QrSegment;\r\n  qrcodegen2.QrSegment = _QrSegment;\r\n})(qrcodegen || (qrcodegen = {}));\r\n((qrcodegen2) => {\r\n  let QrCode;\r\n  ((QrCode2) => {\r\n    const _Ecc = class _Ecc {\r\n      // The QR Code can tolerate about 30% erroneous codewords\r\n      /*-- Constructor and fields --*/\r\n      constructor(ordinal, formatBits) {\r\n        this.ordinal = ordinal;\r\n        this.formatBits = formatBits;\r\n      }\r\n    };\r\n    /*-- Constants --*/\r\n    _Ecc.LOW = new _Ecc(0, 1);\r\n    // The QR Code can tolerate about  7% erroneous codewords\r\n    _Ecc.MEDIUM = new _Ecc(1, 0);\r\n    // The QR Code can tolerate about 15% erroneous codewords\r\n    _Ecc.QUARTILE = new _Ecc(2, 3);\r\n    // The QR Code can tolerate about 25% erroneous codewords\r\n    _Ecc.HIGH = new _Ecc(3, 2);\r\n    let Ecc = _Ecc;\r\n    QrCode2.Ecc = _Ecc;\r\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\r\n})(qrcodegen || (qrcodegen = {}));\r\n((qrcodegen2) => {\r\n  let QrSegment;\r\n  ((QrSegment2) => {\r\n    const _Mode = class _Mode {\r\n      /*-- Constructor and fields --*/\r\n      constructor(modeBits, numBitsCharCount) {\r\n        this.modeBits = modeBits;\r\n        this.numBitsCharCount = numBitsCharCount;\r\n      }\r\n      /*-- Method --*/\r\n      // (Package-private) Returns the bit width of the character count field for a segment in\r\n      // this mode in a QR Code at the given version number. The result is in the range [0, 16].\r\n      numCharCountBits(ver) {\r\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\r\n      }\r\n    };\r\n    /*-- Constants --*/\r\n    _Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\r\n    _Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\r\n    _Mode.BYTE = new _Mode(4, [8, 16, 16]);\r\n    _Mode.KANJI = new _Mode(8, [8, 10, 12]);\r\n    _Mode.ECI = new _Mode(7, [0, 0, 0]);\r\n    let Mode = _Mode;\r\n    QrSegment2.Mode = _Mode;\r\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\r\n})(qrcodegen || (qrcodegen = {}));\r\nvar qrcodegen_default = qrcodegen;\r\n\r\n// src/index.tsx\r\n/**\r\n * @license qrcode.react\r\n * Copyright (c) Paul O'Shannessy\r\n * SPDX-License-Identifier: ISC\r\n */\r\nvar ERROR_LEVEL_MAP = {\r\n  L: qrcodegen_default.QrCode.Ecc.LOW,\r\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\r\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\r\n  H: qrcodegen_default.QrCode.Ecc.HIGH\r\n};\r\nvar DEFAULT_SIZE = 128;\r\nvar DEFAULT_LEVEL = \"L\";\r\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\r\nvar DEFAULT_FGCOLOR = \"#000000\";\r\nvar DEFAULT_INCLUDEMARGIN = false;\r\nvar DEFAULT_MINVERSION = 1;\r\nvar SPEC_MARGIN_SIZE = 4;\r\nvar DEFAULT_MARGIN_SIZE = 0;\r\nvar DEFAULT_IMG_SCALE = 0.1;\r\nfunction generatePath(modules, margin = 0) {\r\n  const ops = [];\r\n  modules.forEach(function(row, y) {\r\n    let start = null;\r\n    row.forEach(function(cell, x) {\r\n      if (!cell && start !== null) {\r\n        ops.push(\r\n          `M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`\r\n        );\r\n        start = null;\r\n        return;\r\n      }\r\n      if (x === row.length - 1) {\r\n        if (!cell) {\r\n          return;\r\n        }\r\n        if (start === null) {\r\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\r\n        } else {\r\n          ops.push(\r\n            `M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`\r\n          );\r\n        }\r\n        return;\r\n      }\r\n      if (cell && start === null) {\r\n        start = x;\r\n      }\r\n    });\r\n  });\r\n  return ops.join(\"\");\r\n}\r\nfunction excavateModules(modules, excavation) {\r\n  return modules.slice().map((row, y) => {\r\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\r\n      return row;\r\n    }\r\n    return row.map((cell, x) => {\r\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\r\n        return cell;\r\n      }\r\n      return false;\r\n    });\r\n  });\r\n}\r\nfunction getImageSettings(cells, size, margin, imageSettings) {\r\n  if (imageSettings == null) {\r\n    return null;\r\n  }\r\n  const numCells = cells.length + margin * 2;\r\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\r\n  const scale = numCells / size;\r\n  const w = (imageSettings.width || defaultSize) * scale;\r\n  const h = (imageSettings.height || defaultSize) * scale;\r\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\r\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\r\n  const opacity = imageSettings.opacity == null ? 1 : imageSettings.opacity;\r\n  let excavation = null;\r\n  if (imageSettings.excavate) {\r\n    let floorX = Math.floor(x);\r\n    let floorY = Math.floor(y);\r\n    let ceilW = Math.ceil(w + x - floorX);\r\n    let ceilH = Math.ceil(h + y - floorY);\r\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\r\n  }\r\n  const crossOrigin = imageSettings.crossOrigin;\r\n  return { x, y, h, w, excavation, opacity, crossOrigin };\r\n}\r\nfunction getMarginSize(includeMargin, marginSize) {\r\n  if (marginSize != null) {\r\n    return Math.max(Math.floor(marginSize), 0);\r\n  }\r\n  return includeMargin ? SPEC_MARGIN_SIZE : DEFAULT_MARGIN_SIZE;\r\n}\r\nfunction useQRCode({\r\n  value,\r\n  level,\r\n  minVersion,\r\n  includeMargin,\r\n  marginSize,\r\n  imageSettings,\r\n  size,\r\n  boostLevel\r\n}) {\r\n  let qrcode = React.useMemo(() => {\r\n    const values = Array.isArray(value) ? value : [value];\r\n    const segments = values.reduce((accum, v) => {\r\n      accum.push(...qrcodegen_default.QrSegment.makeSegments(v));\r\n      return accum;\r\n    }, []);\r\n    return qrcodegen_default.QrCode.encodeSegments(\r\n      segments,\r\n      ERROR_LEVEL_MAP[level],\r\n      minVersion,\r\n      void 0,\r\n      void 0,\r\n      boostLevel\r\n    );\r\n  }, [value, level, minVersion, boostLevel]);\r\n  const { cells, margin, numCells, calculatedImageSettings } = React.useMemo(() => {\r\n    let cells2 = qrcode.getModules();\r\n    const margin2 = getMarginSize(includeMargin, marginSize);\r\n    const numCells2 = cells2.length + margin2 * 2;\r\n    const calculatedImageSettings2 = getImageSettings(\r\n      cells2,\r\n      size,\r\n      margin2,\r\n      imageSettings\r\n    );\r\n    return {\r\n      cells: cells2,\r\n      margin: margin2,\r\n      numCells: numCells2,\r\n      calculatedImageSettings: calculatedImageSettings2\r\n    };\r\n  }, [qrcode, size, imageSettings, includeMargin, marginSize]);\r\n  return {\r\n    qrcode,\r\n    margin,\r\n    cells,\r\n    numCells,\r\n    calculatedImageSettings\r\n  };\r\n}\r\nvar SUPPORTS_PATH2D = function() {\r\n  try {\r\n    new Path2D().addPath(new Path2D());\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n  return true;\r\n}();\r\nvar QRCodeCanvas = React.forwardRef(\r\n  function QRCodeCanvas2(props, forwardedRef) {\r\n    const _a = props, {\r\n      value,\r\n      size = DEFAULT_SIZE,\r\n      level = DEFAULT_LEVEL,\r\n      bgColor = DEFAULT_BGCOLOR,\r\n      fgColor = DEFAULT_FGCOLOR,\r\n      includeMargin = DEFAULT_INCLUDEMARGIN,\r\n      minVersion = DEFAULT_MINVERSION,\r\n      boostLevel,\r\n      marginSize,\r\n      imageSettings\r\n    } = _a, extraProps = __objRest(_a, [\r\n      \"value\",\r\n      \"size\",\r\n      \"level\",\r\n      \"bgColor\",\r\n      \"fgColor\",\r\n      \"includeMargin\",\r\n      \"minVersion\",\r\n      \"boostLevel\",\r\n      \"marginSize\",\r\n      \"imageSettings\"\r\n    ]);\r\n    const _b = extraProps, { style } = _b, otherProps = __objRest(_b, [\"style\"]);\r\n    const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\r\n    const _canvas = React.useRef(null);\r\n    const _image = React.useRef(null);\r\n    const setCanvasRef = React.useCallback(\r\n      (node) => {\r\n        _canvas.current = node;\r\n        if (typeof forwardedRef === \"function\") {\r\n          forwardedRef(node);\r\n        } else if (forwardedRef) {\r\n          forwardedRef.current = node;\r\n        }\r\n      },\r\n      [forwardedRef]\r\n    );\r\n    const [isImgLoaded, setIsImageLoaded] = React.useState(false);\r\n    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\r\n      value,\r\n      level,\r\n      minVersion,\r\n      boostLevel,\r\n      includeMargin,\r\n      marginSize,\r\n      imageSettings,\r\n      size\r\n    });\r\n    React.useEffect(() => {\r\n      if (_canvas.current != null) {\r\n        const canvas = _canvas.current;\r\n        const ctx = canvas.getContext(\"2d\");\r\n        if (!ctx) {\r\n          return;\r\n        }\r\n        let cellsToDraw = cells;\r\n        const image = _image.current;\r\n        const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\r\n        if (haveImageToRender) {\r\n          if (calculatedImageSettings.excavation != null) {\r\n            cellsToDraw = excavateModules(\r\n              cells,\r\n              calculatedImageSettings.excavation\r\n            );\r\n          }\r\n        }\r\n        const pixelRatio = window.devicePixelRatio || 1;\r\n        canvas.height = canvas.width = size * pixelRatio;\r\n        const scale = size / numCells * pixelRatio;\r\n        ctx.scale(scale, scale);\r\n        ctx.fillStyle = bgColor;\r\n        ctx.fillRect(0, 0, numCells, numCells);\r\n        ctx.fillStyle = fgColor;\r\n        if (SUPPORTS_PATH2D) {\r\n          ctx.fill(new Path2D(generatePath(cellsToDraw, margin)));\r\n        } else {\r\n          cells.forEach(function(row, rdx) {\r\n            row.forEach(function(cell, cdx) {\r\n              if (cell) {\r\n                ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\r\n              }\r\n            });\r\n          });\r\n        }\r\n        if (calculatedImageSettings) {\r\n          ctx.globalAlpha = calculatedImageSettings.opacity;\r\n        }\r\n        if (haveImageToRender) {\r\n          ctx.drawImage(\r\n            image,\r\n            calculatedImageSettings.x + margin,\r\n            calculatedImageSettings.y + margin,\r\n            calculatedImageSettings.w,\r\n            calculatedImageSettings.h\r\n          );\r\n        }\r\n      }\r\n    });\r\n    React.useEffect(() => {\r\n      setIsImageLoaded(false);\r\n    }, [imgSrc]);\r\n    const canvasStyle = __spreadValues({ height: size, width: size }, style);\r\n    let img = null;\r\n    if (imgSrc != null) {\r\n      img = /* @__PURE__ */ React.createElement(\r\n        \"img\",\r\n        {\r\n          src: imgSrc,\r\n          key: imgSrc,\r\n          style: { display: \"none\" },\r\n          onLoad: () => {\r\n            setIsImageLoaded(true);\r\n          },\r\n          ref: _image,\r\n          crossOrigin: calculatedImageSettings == null ? void 0 : calculatedImageSettings.crossOrigin\r\n        }\r\n      );\r\n    }\r\n    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\r\n      \"canvas\",\r\n      __spreadValues({\r\n        style: canvasStyle,\r\n        height: size,\r\n        width: size,\r\n        ref: setCanvasRef,\r\n        role: \"img\"\r\n      }, otherProps)\r\n    ), img);\r\n  }\r\n);\r\nQRCodeCanvas.displayName = \"QRCodeCanvas\";\r\nvar QRCodeSVG = React.forwardRef(\r\n  function QRCodeSVG2(props, forwardedRef) {\r\n    const _a = props, {\r\n      value,\r\n      size = DEFAULT_SIZE,\r\n      level = DEFAULT_LEVEL,\r\n      bgColor = DEFAULT_BGCOLOR,\r\n      fgColor = DEFAULT_FGCOLOR,\r\n      includeMargin = DEFAULT_INCLUDEMARGIN,\r\n      minVersion = DEFAULT_MINVERSION,\r\n      boostLevel,\r\n      title,\r\n      marginSize,\r\n      imageSettings\r\n    } = _a, otherProps = __objRest(_a, [\r\n      \"value\",\r\n      \"size\",\r\n      \"level\",\r\n      \"bgColor\",\r\n      \"fgColor\",\r\n      \"includeMargin\",\r\n      \"minVersion\",\r\n      \"boostLevel\",\r\n      \"title\",\r\n      \"marginSize\",\r\n      \"imageSettings\"\r\n    ]);\r\n    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\r\n      value,\r\n      level,\r\n      minVersion,\r\n      boostLevel,\r\n      includeMargin,\r\n      marginSize,\r\n      imageSettings,\r\n      size\r\n    });\r\n    let cellsToDraw = cells;\r\n    let image = null;\r\n    if (imageSettings != null && calculatedImageSettings != null) {\r\n      if (calculatedImageSettings.excavation != null) {\r\n        cellsToDraw = excavateModules(\r\n          cells,\r\n          calculatedImageSettings.excavation\r\n        );\r\n      }\r\n      image = /* @__PURE__ */ React.createElement(\r\n        \"image\",\r\n        {\r\n          href: imageSettings.src,\r\n          height: calculatedImageSettings.h,\r\n          width: calculatedImageSettings.w,\r\n          x: calculatedImageSettings.x + margin,\r\n          y: calculatedImageSettings.y + margin,\r\n          preserveAspectRatio: \"none\",\r\n          opacity: calculatedImageSettings.opacity,\r\n          crossOrigin: calculatedImageSettings.crossOrigin\r\n        }\r\n      );\r\n    }\r\n    const fgPath = generatePath(cellsToDraw, margin);\r\n    return /* @__PURE__ */ React.createElement(\r\n      \"svg\",\r\n      __spreadValues({\r\n        height: size,\r\n        width: size,\r\n        viewBox: `0 0 ${numCells} ${numCells}`,\r\n        ref: forwardedRef,\r\n        role: \"img\"\r\n      }, otherProps),\r\n      !!title && /* @__PURE__ */ React.createElement(\"title\", null, title),\r\n      /* @__PURE__ */ React.createElement(\r\n        \"path\",\r\n        {\r\n          fill: bgColor,\r\n          d: `M0,0 h${numCells}v${numCells}H0z`,\r\n          shapeRendering: \"crispEdges\"\r\n        }\r\n      ),\r\n      /* @__PURE__ */ React.createElement(\"path\", { fill: fgColor, d: fgPath, shapeRendering: \"crispEdges\" }),\r\n      image\r\n    );\r\n  }\r\n);\r\nQRCodeSVG.displayName = \"QRCodeSVG\";\r\nexport {\r\n  QRCodeCanvas,\r\n  QRCodeSVG\r\n};\r\n"],"mappings":"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AG;EAChC;EACA;EACA,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACnK;EACA,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACpK;EACA,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}